{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Shield Documentation","text":""},{"location":"#what-is-shield","title":"What is Shield?","text":"<p>Shield is the official authentication and authorization framework for CodeIgniter 4. While it does provide a base set of tools that are commonly used in websites, it is designed to be flexible and easily customizable.</p>"},{"location":"#primary-goals","title":"Primary Goals","text":"<p>The primary goals for Shield are:</p> <ol> <li>It must be very flexible and allow developers to extend/override almost any part of it.</li> <li>It must have security at its core. It is an auth lib after all.</li> <li>To cover many auth needs right out of the box, but be simple to add additional functionality to.</li> </ol>"},{"location":"#important-features","title":"Important Features","text":"<ul> <li>Session-based Authentication (traditional ID/Password with Remember-me)</li> <li>Stateless Authentication using Access Token, HMAC SHA256 Token, or JWT</li> <li>Optional Email verification on account registration</li> <li>Optional Email-based Two-Factor Authentication after login</li> <li>Magic Link Login when a user forgets their password</li> <li>Flexible Group-based Access Control (think Roles, but more flexible), and users can be granted additional Permissions</li> <li>A simple Auth Helper that provides access to the most common auth actions</li> <li>Save initial settings in your code, so it can be in version control, but can also be updated in the database, thanks to our Settings library</li> <li>Highly configurable</li> <li>User Entity and User Provider (<code>UserModel</code>) ready for you to use or extend</li> <li>Built to extend and modify<ul> <li>Easily extendable controllers</li> <li>All required views that can be used as is or swapped out for your own</li> </ul> </li> </ul>"},{"location":"#license","title":"License","text":"<p>Shield is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Every open-source project depends on it's contributors to be a success. The following users have contributed in one manner or another in making Shield:</p> <p> </p> <p>Made with contrib.rocks.</p> <p>The following articles/sites have been fundamental in shaping the security and best practices used within this library, in no particular order:</p> <ul> <li>Google Cloud: 13 best practices for user account, authentication, and password management, 2021 edition</li> <li>NIST Digital Identity Guidelines</li> <li>Implementing Secure User Authentication in PHP Applications with Long-Term Persistence (Login with \"Remember Me\" Cookies) </li> <li>Password Storage - OWASP Cheat Sheet Series</li> </ul>"},{"location":"addons/jwt/","title":"JWT Authentication","text":"<p>Note</p> <p>Shield now supports only JWS (Singed JWT). JWE (Encrypted JWT) is not supported.</p>"},{"location":"addons/jwt/#what-is-jwt","title":"What is JWT?","text":"<p>JWT or JSON Web Token is a compact and self-contained way of securely transmitting information between parties as a JSON object. It is commonly used for authentication and authorization purposes in web applications.</p> <p>For example, when a user logs in to a web application, the server generates a JWT token and sends it to the client. The client then includes this token in the header of subsequent requests to the server. The server verifies the authenticity of the token and grants access to protected resources accordingly.</p> <p>If you are not familiar with JWT, we recommend that you check out Introduction to JSON Web Tokens before continuing.</p>"},{"location":"addons/jwt/#setup","title":"Setup","text":"<p>To use JWT Authentication, you need additional setup and configuration.</p>"},{"location":"addons/jwt/#manual-setup","title":"Manual Setup","text":"<ol> <li> <p>Install \"firebase/php-jwt\" via Composer.</p> <pre><code>composer require firebase/php-jwt:^6.4</code></pre> </li> <li> <p>Copy the AuthJWT.php from vendor/codeigniter4/shield/src/Config/ into your project's config folder and update the namespace to <code>Config</code>. You will also need to have these classes extend the original classes. See the example below.</p> <pre><code>&lt;?php\n\n// app/Config/AuthJWT.php\n\ndeclare(strict_types=1);\n\nnamespace Config;\n\nuse CodeIgniter\\Shield\\Config\\AuthJWT as ShieldAuthJWT;\n\n/**\n * JWT Authenticator Configuration\n */\nclass AuthJWT extends ShieldAuthJWT\n{\n    // ...\n}</code></pre> </li> <li> <p>If your app/Config/Auth.php is not up-to-date, you also need to update it. Check vendor/codeigniter4/shield/src/Config/Auth.php and apply the differences.</p> <p>You need to add the following constants: <pre><code>public const RECORD_LOGIN_ATTEMPT_NONE    = 0; // Do not record at all\npublic const RECORD_LOGIN_ATTEMPT_FAILURE = 1; // Record only failures\npublic const RECORD_LOGIN_ATTEMPT_ALL     = 2; // Record all login attempts</code></pre></p> <p>You need to add JWT Authenticator: <pre><code>use CodeIgniter\\Shield\\Authentication\\Authenticators\\JWT;\n\n// ...\n\npublic array $authenticators = [\n    'tokens'  =&gt; AccessTokens::class,\n    'session' =&gt; Session::class,\n    'jwt'     =&gt; JWT::class,\n];</code></pre></p> <p>If you want to use JWT Authenticator in Authentication Chain, add <code>jwt</code>: <pre><code>public array $authenticationChain = [\n    'session',\n    'tokens',\n    'jwt'\n];</code></pre></p> </li> </ol>"},{"location":"addons/jwt/#configuration","title":"Configuration","text":"<p>Configure app/Config/AuthJWT.php for your needs.</p>"},{"location":"addons/jwt/#set-the-default-claims","title":"Set the Default Claims","text":"<p>Note</p> <p>A payload contains the actual data being transmitted, such as user ID, role, or expiration time. Items in a payload is called claims.</p> <p>Set the default payload items to the property <code>$defaultClaims</code>.</p> <p>E.g.: <pre><code>public array $defaultClaims = [\n    'iss' =&gt; 'https://codeigniter.com/',\n];</code></pre></p> <p>The default claims will be included in all tokens issued by Shield.</p>"},{"location":"addons/jwt/#set-secret-key","title":"Set Secret Key","text":"<p>Set your secret key in the <code>$keys</code> property, or set it in your <code>.env</code> file.</p> <p>E.g.: <pre><code>authjwt.keys.default.0.secret = 8XBFsF6HThIa7OV/bSynahEch+WbKrGcuiJVYPiwqPE=</code></pre></p> <p>It needs at least 256 bits random string. The length of the secret depends on the algorithm we use. The default one is <code>HS256</code>, so to ensure that the hash value is secure and not easily guessable, the secret key should be at least as long as the hash function's output - 256 bits (32 bytes). You can get a secure random string with the following command:</p> <pre><code>php -r 'echo base64_encode(random_bytes(32));'</code></pre> <p>Note</p> <p>The secret key is used for signing and validating tokens.</p>"},{"location":"addons/jwt/#login-attempt-logging","title":"Login Attempt Logging","text":"<p>By default, only failed login attempts are recorded in the <code>auth_token_logins</code> table.</p> <pre><code>public int $recordLoginAttempt = Auth::RECORD_LOGIN_ATTEMPT_FAILURE;</code></pre> <p>If you don't want any logs, set it to <code>Auth::RECORD_LOGIN_ATTEMPT_NONE</code>.</p> <p>If you want to log all login attempts, set it to <code>Auth::RECORD_LOGIN_ATTEMPT_ALL</code>. It means you log all requests.</p>"},{"location":"addons/jwt/#issuing-jwts","title":"Issuing JWTs","text":"<p>To use JWT Authentication, you need a controller that issues JWTs.</p> <p>Here is a sample controller. When a client posts valid credentials (email/password), it returns a new JWT.</p> <pre><code>// app/Config/Routes.php\n$routes-&gt;post('auth/jwt', '\\App\\Controllers\\Auth\\LoginController::jwtLogin');</code></pre> <pre><code>&lt;?php\n\n// app/Controllers/Auth/LoginController.php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controllers\\Auth;\n\nuse App\\Controllers\\BaseController;\nuse CodeIgniter\\API\\ResponseTrait;\nuse CodeIgniter\\HTTP\\ResponseInterface;\nuse CodeIgniter\\Shield\\Authentication\\Authenticators\\Session;\nuse CodeIgniter\\Shield\\Authentication\\JWTManager;\nuse CodeIgniter\\Shield\\Validation\\ValidationRules;\n\nclass LoginController extends BaseController\n{\n    use ResponseTrait;\n\n    /**\n     * Authenticate Existing User and Issue JWT.\n     */\n    public function jwtLogin(): ResponseInterface\n    {\n        // Get the validation rules\n        $rules = $this-&gt;getValidationRules();\n\n        // Validate credentials\n        if (! $this-&gt;validateData($this-&gt;request-&gt;getJSON(true), $rules, [], config('Auth')-&gt;DBGroup)) {\n            return $this-&gt;fail(\n                ['errors' =&gt; $this-&gt;validator-&gt;getErrors()],\n                $this-&gt;codes['unauthorized']\n            );\n        }\n\n        // Get the credentials for login\n        $credentials             = $this-&gt;request-&gt;getJsonVar(setting('Auth.validFields'));\n        $credentials             = array_filter($credentials);\n        $credentials['password'] = $this-&gt;request-&gt;getJsonVar('password');\n\n        /** @var Session $authenticator */\n        $authenticator = auth('session')-&gt;getAuthenticator();\n\n        // Check the credentials\n        $result = $authenticator-&gt;check($credentials);\n\n        // Credentials mismatch.\n        if (! $result-&gt;isOK()) {\n            // @TODO Record a failed login attempt\n\n            return $this-&gt;failUnauthorized($result-&gt;reason());\n        }\n\n        // Credentials match.\n        // @TODO Record a successful login attempt\n\n        $user = $result-&gt;extraInfo();\n\n        /** @var JWTManager $manager */\n        $manager = service('jwtmanager');\n\n        // Generate JWT and return to client\n        $jwt = $manager-&gt;generateToken($user);\n\n        return $this-&gt;respond([\n            'access_token' =&gt; $jwt,\n        ]);\n    }\n\n    /**\n     * Returns the rules that should be used for validation.\n     *\n     * @return array&lt;string, array&lt;string, array&lt;string&gt;|string&gt;&gt;\n     * @phpstan-return array&lt;string, array&lt;string, string|list&lt;string&gt;&gt;&gt;\n     */\n    protected function getValidationRules(): array\n    {\n        $rules = new ValidationRules();\n\n        return $rules-&gt;getLoginRules();\n    }\n}</code></pre> <p>You could send a request with the existing user's credentials by curl like this:</p> <pre><code>curl --location 'http://localhost:8080/auth/jwt' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"email\" : \"admin@example.jp\" , \"password\" : \"passw0rd!\"}'</code></pre> <p>When making all future requests to the API, the client should send the JWT in the <code>Authorization</code> header as a <code>Bearer</code> token.</p> <p>You could send a request with the <code>Authorization</code> header by curl like this:</p> <pre><code>curl --location --request GET 'http://localhost:8080/api/users' \\\n--header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTaGllbGQgVGVzdCBBcHAiLCJzdWIiOiIxIiwiaWF0IjoxNjgxODA1OTMwLCJleHAiOjE2ODE4MDk1MzB9.DGpOmRPOBe45whVtEOSt53qJTw_CpH0V8oMoI_gm2XI'</code></pre>"},{"location":"addons/jwt/#protecting-routes","title":"Protecting Routes","text":"<p>The first way to specify which routes are protected is to use the <code>jwt</code> controller filter.</p> <p>For example, to ensure it protects all routes under the <code>/api</code> route group, you would use the <code>$filters</code> setting on app/Config/Filters.php.</p> <pre><code>public $filters = [\n    'jwt' =&gt; ['before' =&gt; ['api', 'api/*']],\n];</code></pre> <p>You can also specify the filter should run on one or more routes within the routes file itself:</p> <pre><code>$routes-&gt;group('api', ['filter' =&gt; 'jwt'], static function ($routes) {\n    // ...\n});\n\n$routes-&gt;get('users', 'UserController::list', ['filter' =&gt; 'jwt']);</code></pre> <p>When the filter runs, it checks the <code>Authorization</code> header for a <code>Bearer</code> value that has the JWT. It then validates the token. If the token is valid, it can determine the correct user, which will then be available through an <code>auth()-&gt;user()</code> call.</p>"},{"location":"addons/jwt/#method-references","title":"Method References","text":""},{"location":"addons/jwt/#generating-signed-jwts","title":"Generating Signed JWTs","text":""},{"location":"addons/jwt/#jwt-to-a-specific-user","title":"JWT to a Specific User","text":"<p>JWTs are created through the <code>JWTManager::generateToken()</code> method. This takes a User object to give to the token as the first argument. It can also take optional additional claims array, time to live in seconds, a key group (an array key) in the <code>Config\\AuthJWT::$keys</code>, and additional header array:</p> <pre><code>public function generateToken(\n    User $user,\n    array $claims = [],\n    ?int $ttl = null,\n    $keyset = 'default',\n    ?array $headers = null\n): string</code></pre> <p>The following code generates a JWT to the user.</p> <pre><code>use CodeIgniter\\Shield\\Authentication\\JWTManager;\n\n/** @var JWTManager $manager */\n$manager = service('jwtmanager');\n\n$user   = auth()-&gt;user();\n$claims = [\n    'email' =&gt; $user-&gt;email,\n];\n$jwt = $manager-&gt;generateToken($user, $claims);</code></pre> <p>It sets the <code>Config\\AuthJWT::$defaultClaims</code> to the token, and adds the <code>'email'</code> claim and the user ID in the <code>\"sub\"</code> (subject) claim. It also sets <code>\"iat\"</code> (Issued At) and <code>\"exp\"</code> (Expiration Time) claims automatically if you don't specify.</p>"},{"location":"addons/jwt/#arbitrary-jwt","title":"Arbitrary JWT","text":"<p>You can generate arbitrary JWT with the <code>JWTManager::issue()</code> method.</p> <p>It takes a JWT claims array, and can take time to live in seconds, a key group (an array key) in the <code>Config\\AuthJWT::$keys</code>, and additional header array:</p> <pre><code>public function issue(\n    array $claims,\n    ?int $ttl = null,\n    $keyset = 'default',\n    ?array $headers = null\n): string</code></pre> <p>The following code generates a JWT.</p> <pre><code>use CodeIgniter\\Shield\\Authentication\\JWTManager;\n\n/** @var JWTManager $manager */\n$manager = service('jwtmanager');\n\n$payload = [\n    'user_id' =&gt; '1',\n    'email'   =&gt; 'admin@example.jp',\n];\n$jwt = $manager-&gt;issue($payload, DAY);</code></pre> <p>It uses the <code>secret</code> and <code>alg</code> in the <code>Config\\AuthJWT::$keys['default']</code>.</p> <p>It sets the <code>Config\\AuthJWT::$defaultClaims</code> to the token, and sets <code>\"iat\"</code> (Issued At) and <code>\"exp\"</code> (Expiration Time) claims automatically even if you don't pass them.</p>"},{"location":"addons/jwt/#logging","title":"Logging","text":"<p>Login attempts are recorded in the <code>auth_token_logins</code> table, according to the configuration above.</p> <p>When a failed login attempt is logged, the raw token value sent is saved in the <code>identifier</code> column.</p> <p>When a successful login attempt is logged, the SHA256 hash value of the token sent is saved in the <code>identifier</code> column.</p>"},{"location":"customization/adding_attributes_to_users/","title":"Adding Attributes to Users","text":"<p>If you need to add new attributes like phone numbers, employee or school IDs, etc. to users, one way is to add columns to <code>users</code> table.</p>"},{"location":"customization/adding_attributes_to_users/#create-migration-file","title":"Create Migration File","text":"<p>Create a migration file to add new columns.</p> <p>You can easily create a file for it with the <code>spark</code> command: <pre><code>php spark make:migration AddMobileNumberToUsers</code></pre></p> <p>And write code to add/drop columns.</p> <pre><code>&lt;?php\n\nnamespace App\\Database\\Migrations;\n\nuse CodeIgniter\\Database\\Forge;\nuse CodeIgniter\\Database\\Migration;\n\nclass AddMobileNumberToUsers extends Migration\n{\n    /**\n     * @var string[]\n     */\n    private array $tables;\n\n    public function __construct(?Forge $forge = null)\n    {\n        parent::__construct($forge);\n\n        /** @var \\Config\\Auth $authConfig */\n        $authConfig   = config('Auth');\n        $this-&gt;tables = $authConfig-&gt;tables;\n    }\n\n    public function up()\n    {\n        $fields = [\n            'mobile_number' =&gt; ['type' =&gt; 'VARCHAR', 'constraint' =&gt; '20', 'null' =&gt; true],\n        ];\n        $this-&gt;forge-&gt;addColumn($this-&gt;tables['users'], $fields);\n    }\n\n    public function down()\n    {\n        $fields = [\n            'mobile_number',\n        ];\n        $this-&gt;forge-&gt;dropColumn($this-&gt;tables['users'], $fields);\n    }\n}</code></pre>"},{"location":"customization/adding_attributes_to_users/#run-migrations","title":"Run Migrations","text":"<p>Run the migration file:</p> <pre><code>php spark migrate</code></pre> <p>And check the <code>users</code> table:</p> <pre><code>php spark db:table users</code></pre>"},{"location":"customization/adding_attributes_to_users/#create-usermodel","title":"Create UserModel","text":"<p>See Customizing User Provider.</p> <p>Don't forget to add the added attributes to the <code>$allowedFields</code> property.</p>"},{"location":"customization/adding_attributes_to_users/#update-validation-rules","title":"Update Validation Rules","text":"<p>You need to update the validation rules for registration.</p> <p>If you do not add the validation rules for the new fields, the new field data will not be saved to the database.</p> <p>Add the <code>$registration</code> property with the all validation rules for registration in app/Config/Validation.php:</p> <pre><code>&lt;?php\n\nnamespace Config;\n\nuse CodeIgniter\\Config\\BaseConfig;\nuse CodeIgniter\\Validation\\StrictRules\\CreditCardRules;\nuse CodeIgniter\\Validation\\StrictRules\\FileRules;\nuse CodeIgniter\\Validation\\StrictRules\\FormatRules;\nuse CodeIgniter\\Validation\\StrictRules\\Rules;\n\nclass Validation extends BaseConfig\n{\n    // ...\n\n    // --------------------------------------------------------------------\n    // Rules\n    // --------------------------------------------------------------------\n    public $registration = [\n        'username' =&gt; [\n            'label' =&gt; 'Auth.username',\n            'rules' =&gt; [\n                'required',\n                'max_length[30]',\n                'min_length[3]',\n                'regex_match[/\\A[a-zA-Z0-9\\.]+\\z/]',\n                'is_unique[users.username]',\n            ],\n        ],\n        'mobile_number' =&gt; [\n            'label' =&gt; 'Mobile Number',\n            'rules' =&gt; [\n                'max_length[20]',\n                'min_length[10]',\n                'regex_match[/\\A[0-9]+\\z/]',\n                'is_unique[users.mobile_number]',\n            ],\n        ],\n        'email' =&gt; [\n            'label' =&gt; 'Auth.email',\n            'rules' =&gt; [\n                'required',\n                'max_length[254]',\n                'valid_email',\n                'is_unique[auth_identities.secret]',\n            ],\n        ],\n        'password' =&gt; [\n            'label' =&gt; 'Auth.password',\n            'rules' =&gt; [\n                'required',\n                'max_byte[72]',\n                'strong_password[]',\n            ],\n            'errors' =&gt; [\n                'max_byte' =&gt; 'Auth.errorPasswordTooLongBytes',\n            ]\n        ],\n        'password_confirm' =&gt; [\n            'label' =&gt; 'Auth.passwordConfirm',\n            'rules' =&gt; 'required|matches[password]',\n        ],\n    ];\n}</code></pre>"},{"location":"customization/adding_attributes_to_users/#customize-register-view","title":"Customize Register View","text":"<ol> <li> <p>Change the <code>register</code> view file in the app/Config/Auth.php file.</p> <pre><code>public array $views = [\n    // ...\n    'register'                   =&gt; '\\App\\Views\\Shield\\register',\n    // ...\n];</code></pre> </li> <li> <p>Copy file vendor/codeigniter4/shield/src/Views/register.php to app/Views/Shield/register.php.</p> </li> <li> <p>Customize the registration form to add the new fields.</p> <pre><code>&lt;!-- Mobile Number --&gt;\n&lt;div class=\"form-floating mb-2\"&gt;\n    &lt;input type=\"tel\" class=\"form-control\" id=\"floatingMobileNumberInput\" name=\"mobile_number\" autocomplete=\"tel\" placeholder=\"Mobile Number (without hyphen)\" value=\"&lt;?= old('mobile_number') ?&gt;\"&gt;\n    &lt;label for=\"floatingMobileNumberInput\"&gt;Mobile Number (without hyphen)&lt;/label&gt;\n&lt;/div&gt;</code></pre> </li> </ol>"},{"location":"customization/extending_controllers/","title":"Extending the Controllers","text":""},{"location":"customization/extending_controllers/#provided-controllers","title":"Provided Controllers","text":"<p>Shield has the following controllers that can be extended to handle various parts of the authentication process:</p> <ul> <li>ActionController handles the after-login and after-registration actions, like Two Factor Authentication and Email Verification.</li> <li>LoginController handles the login process.</li> <li>RegisterController handles the registration process. Overriding this class allows you to customize the User Provider, the User Entity, and the validation rules.</li> <li>MagicLinkController handles the \"lost password\" process that allows a user to login with a link sent to their email. This allows you to     override the message that is displayed to a user to describe what is happening, if you'd like to provide more information than simply swapping out the view used.</li> </ul>"},{"location":"customization/extending_controllers/#how-to-extend","title":"How to Extend","text":"<p>It is not recommended to copy the entire controller into app/Controllers and change its namespace. Instead, you should create a new controller that extends the existing controller and then only override the methods needed. This allows the other methods to stay up to date with any security updates that might happen in the controllers.</p> <pre><code>&lt;?php\n\nnamespace App\\Controllers;\n\nuse CodeIgniter\\Shield\\Controllers\\LoginController as ShieldLogin;\nuse CodeIgniter\\HTTP\\RedirectResponse;\n\nclass LoginController extends ShieldLogin\n{\n    public function logoutAction(): RedirectResponse\n    {\n        // new functionality\n    }\n}</code></pre> <p>After extending, don't forget to change the route. See Customizing Routes.</p>"},{"location":"customization/integrating_custom_view_libs/","title":"Integrating Custom View Libraries","text":"<p>If your application uses a different method to convert view files to HTML than CodeIgniter's built-in <code>view()</code> helper, you can easily integrate your system anywhere that a view is rendered within Shield.</p> <p>All controllers and actions use the <code>CodeIgniter\\Shield\\Traits\\Viewable</code> trait which provides a simple <code>view()</code> method that takes the same arguments as the <code>view()</code> helper. This allows you to extend the Action or Controller and only change the single method of rendering the view, leaving all of the logic untouched so your app will not need to maintain Shield logic when it doesn't need to change it.</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controllers;\n\nuse Acme\\Themes\\Traits\\Themeable;\nuse CodeIgniter\\Shield\\Controllers\\LoginController;\n\nclass MyLoginController extends LoginController\n{\n    use Themable;\n\n    protected function view(string $view, array $data = [], array $options = []): string\n    {\n        return $this-&gt;themedView($view, $data, $options);\n    }\n}</code></pre>"},{"location":"customization/login_identifier/","title":"Customizing Login Identifier","text":"<p>If your application has a need to use something other than <code>email</code> or <code>username</code>, you may specify any valid column within the <code>users</code> table that you may have added.</p> <p>This allows you to easily use phone numbers, employee or school IDs, etc. as the user identifier. You must implement the following steps to set this up.</p> <p>This only works with the Session authenticator.</p> <p>Note</p> <p>By default, Shield requires users to register their email and password. Further customization is required beyond the steps on this page to remove emails from user registrations.</p>"},{"location":"customization/login_identifier/#create-migration-file","title":"Create Migration File","text":"<p>Create a migration that adds a new column to the <code>users</code> table.</p>"},{"location":"customization/login_identifier/#change-validfields","title":"Change $validFields","text":"<p>Edit app/Config/Auth.php so that the new column you just created is within the <code>$validFields</code> array.</p> <pre><code>public array $validFields = [\n    'employee_id'\n];</code></pre> <p>If you have multiple login forms on your site that use different credentials, you must have all of the valid identifying fields in the array.</p> <pre><code>public array $validFields = [\n    'email',\n    'employee_id'\n];</code></pre>"},{"location":"customization/login_identifier/#update-validation-rules","title":"Update Validation Rules","text":"<p>Warning</p> <p>This is very important for security.</p> <p>You must write new Validation Rules and then set them using the Customizing Validation Rules description.</p> <p>Note</p> <p>Not only the Validation Rules for login, but also the rules for registration should be updated. If you do not add the new Validation Rules, the new field will not be saved to the database.</p>"},{"location":"customization/login_identifier/#customize-login-view","title":"Customize Login View","text":"<ol> <li> <p>Change the <code>login</code> view file in the app/Config/Auth.php file.</p> <pre><code>public array $views = [\n    'login'                       =&gt; '\\App\\Views\\Shield\\login',\n    // ...\n];</code></pre> </li> <li> <p>Copy file vendor/codeigniter4/shield/src/Views/login.php to app/Views/Shield/login.php.</p> </li> <li> <p>Customize the login form to change the name of the default <code>email</code> input to the new field name.</p> <pre><code>&lt;!-- Email --&gt;\n&lt;div class=\"mb-2\"&gt;\n    &lt;input type=\"text\" class=\"form-control\" name=\"employee_id\" autocomplete=\"new-employee-id\" placeholder=\"12345\" value=\"&lt;?= old('employee_id') ?&gt;\" required&gt;\n&lt;/div&gt;</code></pre> </li> </ol>"},{"location":"customization/redirect_urls/","title":"Customizing Redirect URLs","text":""},{"location":"customization/redirect_urls/#customize-login-redirect","title":"Customize Login Redirect","text":"<p>You can customize where a user is redirected to on login with the <code>loginRedirect()</code> method of the app/Config/Auth.php config file. This is handy if you want to redirect based on user group or other criteria.</p> <pre><code>public function loginRedirect(): string\n{\n    $url = auth()-&gt;user()-&gt;inGroup('admin')\n        ? '/admin'\n        : setting('Auth.redirects')['login'];\n\n    return $this-&gt;getUrl($url);\n}</code></pre> <p>Oftentimes, you will want to have different redirects for different user groups. A simple example might be that you want admins redirected to <code>/admin</code> while all other groups redirect to <code>/</code>. The app/Config/Auth.php config file also includes methods that you can add additional logic to in order to achieve this:</p> <pre><code>public function loginRedirect(): string\n{\n    if (auth()-&gt;user()-&gt;can('admin.access')) {\n        return '/admin';\n    }\n\n    $url = setting('Auth.redirects')['login'];\n\n    return $this-&gt;getUrl($url);\n}</code></pre>"},{"location":"customization/redirect_urls/#customize-register-redirect","title":"Customize Register Redirect","text":"<p>You can customize where a user is redirected to after registration in the <code>registerRedirect()</code> method of the app/Config/Auth.php config file.</p> <pre><code>public function registerRedirect(): string\n{\n    $url = setting('Auth.redirects')['register'];\n\n    return $this-&gt;getUrl($url);\n}</code></pre>"},{"location":"customization/redirect_urls/#customize-logout-redirect","title":"Customize Logout Redirect","text":"<p>The logout redirect can also be overridden by the <code>logoutRedirect()</code> method of the app/Config/Auth.php config file. This will not be used as often as login and register, but you might find the need. For example, if you programatically logged a user out you might want to take them to a page that specifies why they were logged out. Otherwise, you might take them to the home page or even the login page.</p> <pre><code>public function logoutRedirect(): string\n{\n    $url = setting('Auth.redirects')['logout'];\n\n    return $this-&gt;getUrl($url);\n}</code></pre>"},{"location":"customization/route_config/","title":"Customizing Routes","text":""},{"location":"customization/route_config/#change-some-routes","title":"Change Some Routes","text":"<p>If you need to customize how any of the auth features are handled, you will likely need to update the routes to point to the correct controllers.</p> <p>You can still use the <code>service('auth')-&gt;routes()</code> helper, but you will need to pass the <code>except</code> option with a list of routes to customize:</p> <pre><code>service('auth')-&gt;routes($routes, ['except' =&gt; ['login', 'register']]);</code></pre> <p>Then add the routes to your customized controllers:</p> <pre><code>$routes-&gt;get('login', '\\App\\Controllers\\Auth\\LoginController::loginView');\n$routes-&gt;get('register', '\\App\\Controllers\\Auth\\RegisterController::registerView');</code></pre> <p>After customization, check your routes with the spark routes command.</p>"},{"location":"customization/route_config/#change-namespace","title":"Change Namespace","text":"<p>If you are overriding all of the auth controllers, you can specify the namespace as an option to the <code>routes()</code> helper:</p> <pre><code>service('auth')-&gt;routes($routes, ['namespace' =&gt; '\\App\\Controllers\\Auth']);</code></pre> <p>This will generate the routes with the specified namespace instead of the default Shield namespace. This can be combined with any other options, like <code>except</code>.</p>"},{"location":"customization/route_config/#use-locale-routes","title":"Use Locale Routes","text":"<p>You can use the <code>{locale}</code> placeholder in your routes (see Locale Detection).</p> <pre><code>$routes-&gt;group('{locale}', static function($routes) {\n    service('auth')-&gt;routes($routes);\n});</code></pre> <p>The above code registers the following routes:</p> <pre><code>+--------+----------------------------------+--------------------+--------------------------------------------------------------------+----------------+---------------+\n| Method | Route                            | Name               | Handler                                                            | Before Filters | After Filters |\n+--------+----------------------------------+--------------------+--------------------------------------------------------------------+----------------+---------------+\n| GET    | {locale}/register                | register           | \\CodeIgniter\\Shield\\Controllers\\RegisterController::registerView   |                | toolbar       |\n| GET    | {locale}/login                   | login              | \\CodeIgniter\\Shield\\Controllers\\LoginController::loginView         |                | toolbar       |\n| GET    | {locale}/login/magic-link        | magic-link         | \\CodeIgniter\\Shield\\Controllers\\MagicLinkController::loginView     |                | toolbar       |\n| GET    | {locale}/login/verify-magic-link | verify-magic-link  | \\CodeIgniter\\Shield\\Controllers\\MagicLinkController::verify        |                | toolbar       |\n| GET    | {locale}/logout                  | logout             | \\CodeIgniter\\Shield\\Controllers\\LoginController::logoutAction      |                | toolbar       |\n| GET    | {locale}/auth/a/show             | auth-action-show   | \\CodeIgniter\\Shield\\Controllers\\ActionController::show             |                | toolbar       |\n| POST   | {locale}/register                | register           | \\CodeIgniter\\Shield\\Controllers\\RegisterController::registerAction |                | toolbar       |\n| POST   | {locale}/login                   | \u00bb                  | \\CodeIgniter\\Shield\\Controllers\\LoginController::loginAction       |                | toolbar       |\n| POST   | {locale}/login/magic-link        | \u00bb                  | \\CodeIgniter\\Shield\\Controllers\\MagicLinkController::loginAction   |                | toolbar       |\n| POST   | {locale}/auth/a/handle           | auth-action-handle | \\CodeIgniter\\Shield\\Controllers\\ActionController::handle           |                | toolbar       |\n| POST   | {locale}/auth/a/verify           | auth-action-verify | \\CodeIgniter\\Shield\\Controllers\\ActionController::verify           |                | toolbar       |\n+--------+----------------------------------+--------------------+--------------------------------------------------------------------+----------------+---------------+</code></pre> <p>If you set the global filter in the app/Config/Filters.php file, you need to update the paths for <code>except</code>:</p> <pre><code>public $globals = [\n    'before' =&gt; [\n        // ...\n        'session' =&gt; ['except' =&gt; ['*/login*', '*/register', '*/auth/a/*', '*/logout']],\n    ],\n    // ...\n];</code></pre>"},{"location":"customization/table_names/","title":"Customizing Table Names","text":"<p>If you want to change the default table names, you can change the table names in app/Config/Auth.php.</p> <pre><code>public array $tables = [\n    'users'             =&gt; 'users',\n    'identities'        =&gt; 'auth_identities',\n    'logins'            =&gt; 'auth_logins',\n    'token_logins'      =&gt; 'auth_token_logins',\n    'remember_tokens'   =&gt; 'auth_remember_tokens',\n    'groups_users'      =&gt; 'auth_groups_users',\n    'permissions_users' =&gt; 'auth_permissions_users',\n];</code></pre> <p>Set the table names that you want in the array values.</p> <p>Note</p> <p>You must change the table names before running database migrations.</p>"},{"location":"customization/user_provider/","title":"Customizing User Provider","text":""},{"location":"customization/user_provider/#creating-your-own-usermodel","title":"Creating Your Own UserModel","text":"<p>If you want to customize user attributes, you need to create your own User Provider class. The only requirement is that your new class MUST extend the provided <code>CodeIgniter\\Shield\\Models\\UserModel</code>.</p> <p>Shield has a CLI command to quickly create a custom <code>UserModel</code> class by running the following command in the terminal:</p> <pre><code>php spark shield:model UserModel</code></pre> <p>The class name is optional. If none is provided, the generated class name would be <code>UserModel</code>.</p>"},{"location":"customization/user_provider/#configuring-to-use-your-usermodel","title":"Configuring to Use Your UserModel","text":"<p>After creating the class, set your model classname to the <code>$userProvider</code> property in app/Config/Auth.php:</p> <pre><code>public string $userProvider = \\App\\Models\\UserModel::class;</code></pre>"},{"location":"customization/user_provider/#customizing-your-usermodel","title":"Customizing Your UserModel","text":"<p>Customize your model as you like.</p> <p>If you add attributes, don't forget to add the attributes to the <code>$allowedFields</code> property.</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse CodeIgniter\\Shield\\Models\\UserModel as ShieldUserModel;\n\nclass UserModel extends ShieldUserModel\n{\n    protected function initialize(): void\n    {\n        parent::initialize();\n\n        $this-&gt;allowedFields = [\n            ...$this-&gt;allowedFields,\n            'first_name', // Added\n            'last_name',  // Added\n        ];\n    }\n}</code></pre>"},{"location":"customization/validation_rules/","title":"Customizing Validation Rules","text":""},{"location":"customization/validation_rules/#registration","title":"Registration","text":"<p>Shield has the following rules for registration by default:</p> <pre><code>[\n    'username' =&gt; [\n        'label' =&gt; 'Auth.username',\n        'rules' =&gt; [\n            'required',\n            'max_length[30]',\n            'min_length[3]',\n            'regex_match[/\\A[a-zA-Z0-9\\.]+\\z/]',\n            'is_unique[users.username]',\n        ],\n    ],\n    'email' =&gt; [\n        'label' =&gt; 'Auth.email',\n        'rules' =&gt; [\n            'required',\n            'max_length[254]',\n            'valid_email',\n            'is_unique[auth_identities.secret]',\n        ],\n    ],\n    'password' =&gt; [\n        'label' =&gt; 'Auth.password',\n        'rules' =&gt; [\n                'required',\n                'max_byte[72]',\n                'strong_password[]',\n            ],\n        'errors' =&gt; [\n            'max_byte' =&gt; 'Auth.errorPasswordTooLongBytes'\n        ]\n    ],\n    'password_confirm' =&gt; [\n        'label' =&gt; 'Auth.passwordConfirm',\n        'rules' =&gt; 'required|matches[password]',\n    ],\n];</code></pre> <p>Note</p> <p>If you customize the table names, the table names(<code>users</code> and <code>auth_identities</code>) in the above rules will be automatically changed. The rules are implemented in <code>RegisterController::getValidationRules()</code>.</p> <p>If you need a different set of rules for registration, you can specify them in your <code>Validation</code> configuration (app/Config/Validation.php) like:</p> <pre><code>//--------------------------------------------------------------------\n// Rules For Registration\n//--------------------------------------------------------------------\npublic $registration = [\n    'username' =&gt; [\n        'label' =&gt; 'Auth.username',\n        'rules' =&gt; [\n            'required',\n            'max_length[30]',\n            'min_length[3]',\n            'regex_match[/\\A[a-zA-Z0-9\\.]+\\z/]',\n            'is_unique[users.username]',\n        ],\n    ],\n    'email' =&gt; [\n        'label' =&gt; 'Auth.email',\n        'rules' =&gt; [\n            'required',\n            'max_length[254]',\n            'valid_email',\n            'is_unique[auth_identities.secret]',\n        ],\n    ],\n    'password' =&gt; [\n        'label' =&gt; 'Auth.password',\n        'rules' =&gt; 'required|max_byte[72]|strong_password[]',\n        'errors' =&gt; [\n            'max_byte' =&gt; 'Auth.errorPasswordTooLongBytes'\n        ]\n    ],\n    'password_confirm' =&gt; [\n        'label' =&gt; 'Auth.passwordConfirm',\n        'rules' =&gt; 'required|matches[password]',\n    ],\n];</code></pre> <p>Note</p> <p>If you customize the table names, set the correct table names in the rules.</p>"},{"location":"customization/validation_rules/#login","title":"Login","text":"<p>Similar to the process for validation rules in the Registration section, you can add rules for the login form to app/Config/Validation.php and change the rules.</p> <pre><code>//--------------------------------------------------------------------\n// Rules For Login\n//--------------------------------------------------------------------\npublic $login = [\n    // 'username' =&gt; [\n    //     'label' =&gt; 'Auth.username',\n    //     'rules' =&gt; [\n    //         'required',\n    //         'max_length[30]',\n    //         'min_length[3]',\n    //         'regex_match[/\\A[a-zA-Z0-9\\.]+\\z/]',\n    //     ],\n    // ],\n    'email' =&gt; [\n        'label' =&gt; 'Auth.email',\n        'rules' =&gt; [\n            'required',\n            'max_length[254]',\n            'valid_email'\n        ],\n    ],\n    'password' =&gt; [\n        'label' =&gt; 'Auth.password',\n            'rules' =&gt; [\n                'required',\n                'max_byte[72]',\n            ],\n        'errors' =&gt; [\n            'max_byte' =&gt; 'Auth.errorPasswordTooLongBytes',\n        ]\n    ],\n];</code></pre>"},{"location":"customization/views/","title":"Customizing Views","text":"<p>Shield provides the default view files, but they are sample files. Customization is recommended.</p> <p>If your application uses a different method to convert view files to HTML than CodeIgniter's built-in <code>view()</code> helper, see Integrating Custom View Libraries.</p>"},{"location":"customization/views/#change-views","title":"Change $views","text":"<p>Change values in <code>$views</code> in the app/Config/Auth.php file.</p> <p>For example, if you customize the login page, change the value for <code>'login'</code>:</p> <pre><code>public array $views = [\n    'login'                       =&gt; '\\App\\Views\\Shield\\login', // changed this line.\n    'register'                    =&gt; '\\CodeIgniter\\Shield\\Views\\register',\n    'layout'                      =&gt; '\\CodeIgniter\\Shield\\Views\\layout',\n    'action_email_2fa'            =&gt; '\\CodeIgniter\\Shield\\Views\\email_2fa_show',\n    'action_email_2fa_verify'     =&gt; '\\CodeIgniter\\Shield\\Views\\email_2fa_verify',\n    'action_email_2fa_email'      =&gt; '\\CodeIgniter\\Shield\\Views\\Email\\email_2fa_email',\n    'action_email_activate_show'  =&gt; '\\CodeIgniter\\Shield\\Views\\email_activate_show',\n    'action_email_activate_email' =&gt; '\\CodeIgniter\\Shield\\Views\\Email\\email_activate_email',\n    'magic-link-login'            =&gt; '\\CodeIgniter\\Shield\\Views\\magic_link_form',\n    'magic-link-message'          =&gt; '\\CodeIgniter\\Shield\\Views\\magic_link_message',\n    'magic-link-email'            =&gt; '\\CodeIgniter\\Shield\\Views\\Email\\magic_link_email',\n];</code></pre>"},{"location":"customization/views/#copy-view-file","title":"Copy View File","text":"<p>Copy the file you want to customize in vendor/codeigniter4/shield/src/Views/ to the app/Views/Shield/ folder.</p>"},{"location":"customization/views/#customize-content","title":"Customize Content","text":"<p>Customize the content of the view file in app/Views/Shield/ as you like.</p> <p>When customizing email templates in app/Views/Shield/Email, you have access to the User Entity object through the <code>$user</code> variable. Utilize <code>$user</code> to personalize the email messages according to individual user details.</p>"},{"location":"getting_started/authenticators/","title":"Authenticators","text":""},{"location":"getting_started/authenticators/#authenticator-list","title":"Authenticator List","text":"<p>Shield provides the following Authenticators:</p> <ul> <li>Session authenticator provides traditional ID/Password authentication.   It uses username/email/password to authenticate against and stores the user   information in the session. See Using Session Authenticator   and Session Authenticator for usage.</li> <li>AccessTokens authenticator provides stateless authentication using Personal   Access Tokens passed in the HTTP headers.   See Protecting an API with Access Tokens and   Access Token Authenticator for usage.</li> <li>HmacSha256 authenticator provides stateless authentication using HMAC Keys.   See Protecting an API with HMAC Keys and   HMAC SHA256 Token Authenticator for usage.</li> <li>JWT authenticator provides stateless authentication using JSON Web Token. To use this,   you need additional setup. See JWT Authentication.</li> </ul>"},{"location":"getting_started/concepts/","title":"Shield Concepts","text":"<p>This document covers some of the base concepts used throughout the library.</p>"},{"location":"getting_started/concepts/#repository-state","title":"Repository State","text":"<p>Shield is designed so that the initial setup of your application can all happen in code with nothing required to be saved in the database. This means you do not have to create large seeder files that need to run within each environment.</p> <p>Instead, it can be placed under version control, though the Settings library allows those settings to be easily stored in the database if you create an interface for the user to update those settings.</p>"},{"location":"getting_started/concepts/#settings","title":"Settings","text":"<p>In place of the CodeIgniter <code>config()</code> helper, Shield uses the official Settings library. This provides a way to save any Config class values to the database if you want to modify them, but falls back on the standard Config class if nothing is found in the database.</p>"},{"location":"getting_started/concepts/#user-providers","title":"User Providers","text":"<p>Shield has a model to handle user persistence. Shield calls this the \"User Provider\" class. A default model is provided for you by the <code>CodeIgniter\\Shield\\Models\\UserModel</code> class.</p> <p>You can use your own model to customize user attributes. See Customizing User Provider for details.</p>"},{"location":"getting_started/concepts/#user-identities","title":"User Identities","text":"<p>User accounts are stored separately from the information needed to identify that user. These identifying pieces of data are called User Identities. By default, the library has two types of identities: one for standard email/password information, and one for access tokens.</p> <p>Keeping these identities loosely coupled from the user account itself facilitates integrations with third-party sign-in systems, JWT systems, and more - all on a single user.</p> <p>While this has the potential to make the system more complex, the <code>email</code> and <code>password</code> fields are automatically looked up for you when attempting to access them from the User entity. Caution should be used to craft queries that will pull in the <code>email</code> field when you need to display it to the user, as you could easily run into some n+1 slow queries otherwise.</p> <p>When you <code>save($user)</code> a <code>User</code> instance in the <code>UserModel</code>, the email/password identity will automatically be updated. If no email/password identity exists, you must pass both the email and the password to the User instance prior to calling <code>save()</code>.</p>"},{"location":"getting_started/concepts/#password-validators","title":"Password Validators","text":"<p>When registering a user account, the user's password must be validated to ensure it matches the security requirements of your application. Shield uses a pipeline of Validators to handle the validation. This allows you turn on or off any validation systems that are appropriate for your application. The following Validators are available:</p> <ul> <li>CompositionValidator validates the makeup of the password itself. This used to include things     like ensuring it contained a symbol, a number, etc. According to the current     NIST recommendations this only enforces a     minimum length on the password. You can define the minimum length in     <code>Config\\Auth::$minimumPasswordLength</code> This is enabled by default. The default minimum     value is <code>8</code>.</li> <li>NothingPersonalValidator will compare the password against any fields that have been specified     in <code>Config\\Auth::$personalFields</code>, like first or last names, etc. Additionally, it compares it     against a few simple variations of the username. If the given password too closely matches     any of the personal information, it will be rejected. The similarity value is defined in      <code>Config\\Auth::$maxSimilarity</code>. The default value is 50, but see the docblock in the config      file for more details. This is enabled by default.</li> <li>DictionaryValidator will compare the password against a provided file with about 600,000     frequently used passwords that have been seen in various data dumps over the years. If the     chosen password matches any found in the file, it will be rejected. This is enabled by default.</li> <li>PwnedValidator is like the <code>DictionaryValidator</code>. Instead of comparing to a local file, it     uses a third-party site, Have I Been Pwned to check     against a list of over 630 million leaked passwords from many data dumps across the web.     The search is done securely, and provides more information than the simple dictionary version.     However, this does require an API call to a third-party which not every application will     find acceptable. You should use either this validator or the <code>DictionaryValidator</code>, not both.     This is disabled by default.</li> </ul> <p>You can choose which validators are used in <code>Config\\Auth::$passwordValidators</code>:</p> <pre><code>public array $passwordValidators = [\n    CompositionValidator::class,\n    NothingPersonalValidator::class,\n    DictionaryValidator::class,\n    // PwnedValidator::class,\n];</code></pre> <p>You use <code>strong_password</code> rule for password validation explained above.</p> <p>Note</p> <p>The <code>strong_password</code> rule only supports use cases to check the user's own password. It fetches the authenticated user's data for NothingPersonalValidator if the visitor is authenticated. If you want to have use cases that set and check another user's password, you can't use <code>strong_password</code>. You need to use <code>service('passwords')</code> directly to check the password. But remember, it is not good practice to set passwords for other users. This is because the password should be known only by that user.</p>"},{"location":"getting_started/configuration/","title":"Configuration","text":""},{"location":"getting_started/configuration/#config-files","title":"Config files","text":"<p>Shield has a lot of Config items. Change the default values as needed.</p> <p>If you have completed the setup according to this documentation, you will have the following configuration files:</p> <ul> <li>app/Config/Auth.php</li> <li>app/Config/AuthGroups.php - For Authorization</li> <li>app/Config/AuthToken.php - For AccessTokens and HmacSha256 Authentication</li> <li>app/Config/AuthJWT.php - For JWT Authentication</li> </ul> <p>Note that you do not need to have configuration files for features you do not use.</p>"},{"location":"getting_started/install/","title":"Installation","text":"<p>These instructions assume that you have already installed the CodeIgniter 4 app starter as the basis for your new project, set up your .env file, and created a database that you can access via the Spark CLI script.</p>"},{"location":"getting_started/install/#requirements","title":"Requirements","text":"<ul> <li>Composer</li> <li>Codeigniter v4.3.5 or later</li> <li>A created database that you can access via the Spark CLI script</li> <li>InnoDB (not MyISAM) is required if MySQL is used.</li> </ul>"},{"location":"getting_started/install/#composer-installation","title":"Composer Installation","text":"<p>Installation is done through Composer. The example assumes you have it installed globally. If you have it installed as a phar, or otherwise you will need to adjust the way you call composer itself.</p> <pre><code>composer require codeigniter4/shield</code></pre>"},{"location":"getting_started/install/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting_started/install/#important-composer-error","title":"IMPORTANT: composer error","text":"<p>If you get the following error:</p> <pre><code>Could not find a version of package codeigniter4/shield matching your minimum-stability (stable).\nRequire it with an explicit version constraint allowing its desired stability.</code></pre> <ol> <li> <p>Run the following commands to change your minimum-stability in your project <code>composer.json</code>:</p> <pre><code>composer config minimum-stability dev\ncomposer config prefer-stable true</code></pre> </li> <li> <p>Or specify an explicit version:</p> <pre><code>composer require codeigniter4/shield:dev-develop</code></pre> <p>The above specifies <code>develop</code> branch. See https://getcomposer.org/doc/articles/versions.md#branches</p> <pre><code>composer require codeigniter4/shield:^1.0.0-beta</code></pre> <p>The above specifies <code>v1.0.0-beta</code> or later and before <code>v2.0.0</code>. See https://getcomposer.org/doc/articles/versions.md#caret-version-range-</p> </li> </ol>"},{"location":"getting_started/install/#initial-setup","title":"Initial Setup","text":"<p>There are a few setup items to do before you can start using Shield in your project.</p>"},{"location":"getting_started/install/#command-setup","title":"Command Setup","text":"<ol> <li> <p>Run the following command. This command handles steps 1-6 of Manual Setup.</p> <pre><code>php spark shield:setup</code></pre> <p>Note</p> <p>If you want to customize table names, you must change the table names before running database migrations. See Customizing Table Names.</p> </li> </ol>"},{"location":"getting_started/install/#manual-setup","title":"Manual Setup","text":"<ol> <li> <p>Config Setup:    Copy the Auth.php, AuthGroups.php, and AuthToken.php from vendor/codeigniter4/shield/src/Config/ into your project's config folder and update the namespace to <code>Config</code>. You will also need to have these classes extend the original classes. See the example below. These files contain all the settings, group, and permission information for your application and will need to be modified to meet the needs of your site.</p> <pre><code>// new file - app/Config/Auth.php\n&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace Config;\n\n// ...\nuse CodeIgniter\\Shield\\Config\\Auth as ShieldAuth;\n\nclass Auth extends ShieldAuth\n{\n    // ...\n}</code></pre> </li> <li> <p>Helper Setup:    The <code>auth</code> and <code>setting</code> helpers need to be included in almost every page.    The simplest way to do this is to add it to the app/Config/Autoload.php file:</p> <pre><code>public $helpers = ['auth', 'setting'];</code></pre> </li> <li> <p>Routes Setup:    The default auth routes can be setup with a single call in app/Config/Routes.php:</p> <pre><code>service('auth')-&gt;routes($routes);</code></pre> </li> <li> <p>Security Setup:    Set <code>Config\\Security::$csrfProtection</code> to <code>'session'</code> for security reasons, if you use Session Authenticator.</p> </li> <li> <p>Email Setup:    Configure app/Config/Email.php to allow Shield to send emails.</p> <pre><code>&lt;?php\n\nnamespace Config;\n\nuse CodeIgniter\\Config\\BaseConfig;\n\nclass Email extends BaseConfig\n{\n    public string $fromEmail  = 'your_mail@example.com';\n    public string $fromName   = 'your name';\n    // ...\n}</code></pre> </li> <li> <p>Migration:    Run the migrations.</p> <p>Note</p> <p>If you want to customize table names, you must change the table names before running database migrations. See Customizing Table Names.</p> <pre><code>php spark migrate --all</code></pre> </li> </ol>"},{"location":"getting_started/install/#note-migration-error","title":"Note: migration error","text":"<p>When you run <code>spark migrate --all</code>, if you get <code>Class \"SQLite3\" not found</code> error:</p> <ol> <li>Remove sample migration files in tests/_support/Database/Migrations/</li> <li>Or install <code>sqlite3</code> php extension</li> </ol>"},{"location":"guides/api_hmac_keys/","title":"Protecting an API with HMAC Keys","text":"<p>Note</p> <p>For the purpose of this documentation and to maintain a level of consistency with the Authorization Tokens, the term \"Token\" will be used to represent a set of API Keys (key and secretKey).</p> <p>HMAC Keys can be used to authenticate users for your own site, or when allowing third-party developers to access your API. When making requests using HMAC keys, the token should be included in the <code>Authorization</code> header as an <code>HMAC-SHA256</code> token.</p> <p>Note</p> <p>By default, <code>$authenticatorHeader['hmac']</code> is set to <code>Authorization</code>. You can change this value by setting the <code>$authenticatorHeader['hmac']</code> value in the app/Config/AuthToken.php config file.</p> <p>Tokens are issued with the <code>generateHmacToken()</code> method on the user. This returns a <code>CodeIgniter\\Shield\\Entities\\AccessToken</code> instance. The <code>AccessToken</code> object returned will include a <code>secret</code> field which will be the 'key' and a <code>rawSecretKey</code> field that will be the 'secretKey'. You should display the 'secretKey' to your user immediately, so they have a chance to copy it somewhere safe, as this is the only time you can reveal this key. The 'key' and 'secretKey' are saved to the database. The 'secretKey' is stored encrypted.</p> <p>The <code>generateHmacToken()</code> method requires a name for the token. These are free strings and are often used to identify the user/device the token was generated from/for, like 'Johns MacBook Air'.</p> <pre><code>$routes-&gt;get('hmac/token', static function () {\n    $token = auth()-&gt;user()-&gt;generateHmacToken(service('request')-&gt;getVar('token_name'));\n\n    return json_encode(['key' =&gt; $token-&gt;secret, 'secretKey' =&gt; $token-&gt;rawSecretKey]);\n});</code></pre> <p>You can access all the user's HMAC keys with the <code>hmacTokens()</code> method on that user.</p> <pre><code>$tokens = $user-&gt;hmacTokens();\nforeach ($tokens as $token) {\n    //\n}</code></pre>"},{"location":"guides/api_hmac_keys/#usage","title":"Usage","text":"<p>In order to use HMAC Keys/Token the <code>Authorization</code> header will be set to the following in the request:</p> <pre><code>Authorization: HMAC-SHA256 &lt;key&gt;:&lt;HMAC HASH of request body&gt;</code></pre> <p>The code to do this will look something like this:</p> <pre><code>header(\"Authorization: HMAC-SHA256 {$key}:\" . hash_hmac('sha256', $requestBody, $secretKey));</code></pre>"},{"location":"guides/api_hmac_keys/#hmac-keys-permissions","title":"HMAC Keys Permissions","text":"<p>HMAC keys can be given <code>scopes</code>, which are basically permission strings, for the HMAC Token/Keys. This is generally not the same as the permission the user has, but is used to specify the permissions on the API itself. If not specified, the token is granted all access to all scopes. This might be enough for a smaller API.</p> <pre><code>$token = $user-&gt;generateHmacToken('token-name', ['users-read']);\nreturn json_encode(['key' =&gt; $token-&gt;secret, 'secretKey' =&gt; $token-&gt;rawSecretKey]);</code></pre> <p>Note</p> <p>At this time, scope names should avoid using a colon (<code>:</code>) as this causes issues with the route filters being correctly recognized.</p> <p>When handling incoming requests you can check if the token has been granted access to the scope with the <code>hmacTokenCan()</code> method.</p> <pre><code>if ($user-&gt;hmacTokenCan('users-read')) {\n    //\n}</code></pre>"},{"location":"guides/api_hmac_keys/#revoking-keystokens","title":"Revoking Keys/Tokens","text":"<p>Tokens can be revoked by deleting them from the database with the <code>revokeHmacToken($key)</code> or <code>revokeAllHmacTokens()</code> methods.</p> <pre><code>$user-&gt;revokeHmacToken($key);\n$user-&gt;revokeAllHmacTokens();</code></pre>"},{"location":"guides/api_hmac_keys/#hmac-secret-key-encryption","title":"HMAC Secret Key Encryption","text":"<p>The HMAC Secret Key is stored encrypted. Before you start using HMAC, you will need to set/override the encryption key in <code>$hmacEncryptionKeys</code> in app/Config/AuthToken.php. This should be set using .env and/or system environment variables. Instructions on how to do that can be found in the Setting Your Encryption Key section of the CodeIgniter 4 documentation.</p> <p>You will also be able to adjust the default Driver <code>$hmacEncryptionDefaultDriver</code> and the default Digest <code>$hmacEncryptionDefaultDigest</code>, these default to <code>'OpenSSL'</code> and <code>'SHA512'</code> respectively.</p> <p>See HMAC SHA256 Token Authenticator for additional details on setting these values.</p>"},{"location":"guides/api_hmac_keys/#encryption-key-rotation","title":"Encryption Key Rotation","text":"<p>See HMAC SHA256 Token Authenticator for information on how to set, rotate encryption keys and re-encrypt existing HMAC <code>'secretKey'</code> values.</p>"},{"location":"guides/api_hmac_keys/#protecting-routes","title":"Protecting Routes","text":"<p>The first way to specify which routes are protected is to use the <code>hmac</code> controller filter.</p> <p>For example, to ensure it protects all routes under the <code>/api</code> route group, you would use the <code>$filters</code> setting on app/Config/Filters.php.</p> <pre><code>public $filters = [\n    'hmac' =&gt; ['before' =&gt; ['api/*']],\n];</code></pre> <p>You can also specify the filter should run on one or more routes within the routes file itself:</p> <pre><code>$routes-&gt;group('api', ['filter' =&gt; 'hmac'], function($routes) {\n    //\n});\n$routes-&gt;get('users', 'UserController::list', ['filter' =&gt; 'hmac:users-read']);</code></pre> <p>When the filter runs, it checks the <code>Authorization</code> header for a <code>HMAC-SHA256</code> value that has the computed token. It then parses the raw token and looks it up the <code>key</code> portion in the database. Once found, it will rehash the body of the request to validate the remainder of the Authorization raw token.  If it passes the signature test it can determine the correct user, which will then be available through an <code>auth()-&gt;user()</code> call.</p> <p>Note</p> <p>Currently only a single scope can be used on a route filter. If multiple scopes are passed in, only the first one is checked.</p>"},{"location":"guides/api_tokens/","title":"Protecting an API with Access Tokens","text":"<p>Access Tokens can be used to authenticate users for your own site, or when allowing third-party developers to access your API. When making requests using access tokens, the token should be included in the <code>Authorization</code> header as a <code>Bearer</code> token.</p> <p>Note</p> <p>By default, <code>$authenticatorHeader['tokens']</code> is set to <code>Authorization</code>. You can change this value by setting the <code>$authenticatorHeader['tokens']</code> value in the app/Config/AuthToken.php config file.</p> <p>Tokens are issued with the <code>generateAccessToken()</code> method on the user. This returns a <code>CodeIgniter\\Shield\\Entities\\AccessToken</code> instance. Tokens are hashed using a SHA-256 algorithm before being saved to the database. The access token returned when you generate it will include a <code>raw_token</code> field that contains the plain-text, un-hashed, token. You should display this to your user at once so they have a chance to copy it somewhere safe, as this is the only time this will be available. After this request, there is no way to get the raw token.</p> <p>The <code>generateAccessToken()</code> method requires a name for the token. These are free strings and are often used to identify the user/device the token was generated from, like 'Johns MacBook Air'.</p> <pre><code>$routes-&gt;get('access/token', static function() {\n    $token = auth()-&gt;user()-&gt;generateAccessToken(service('request')-&gt;getVar('token_name'));\n\n    return json_encode(['token' =&gt; $token-&gt;raw_token]);\n});</code></pre> <p>You can access all of the user's tokens with the <code>accessTokens()</code> method on that user.</p> <pre><code>$tokens = $user-&gt;accessTokens();\nforeach($tokens as $token) {\n    //\n}</code></pre>"},{"location":"guides/api_tokens/#token-permissions","title":"Token Permissions","text":"<p>Access tokens can be given <code>scopes</code>, which are basically permission strings, for the token. This is generally not the same as the permission the user has, but is used to specify the permissions on the API itself. If not specified, the token is granted all access to all scopes. This might be enough for a smaller API.</p> <pre><code>return $user-&gt;generateAccessToken('token-name', ['users-read'])-&gt;raw_token;</code></pre> <p>Note</p> <p>At this time, scope names should avoid using a colon (<code>:</code>) as this causes issues with the route filters being correctly recognized.</p> <p>When handling incoming requests you can check if the token has been granted access to the scope with the <code>tokenCan()</code> method.</p> <pre><code>if ($user-&gt;tokenCan('users-read')) {\n    //\n}</code></pre>"},{"location":"guides/api_tokens/#revoking-tokens","title":"Revoking Tokens","text":"<p>Tokens can be revoked by deleting them from the database with the <code>revokeAccessToken($rawToken)</code>, <code>revokeAccessTokenBySecret($secret)</code> or <code>revokeAllAccessTokens()</code> methods.</p> <pre><code>$user-&gt;revokeAccessToken($rawToken);\n$user-&gt;revokeAccessTokenBySecret($secret);\n$user-&gt;revokeAllAccessTokens();</code></pre>"},{"location":"guides/api_tokens/#protecting-routes","title":"Protecting Routes","text":"<p>The first way to specify which routes are protected is to use the <code>tokens</code> controller filter.</p> <p>For example, to ensure it protects all routes under the <code>/api</code> route group, you would use the <code>$filters</code> setting on app/Config/Filters.php.</p> <pre><code>public $filters = [\n    'tokens' =&gt; ['before' =&gt; ['api/*']],\n];</code></pre> <p>You can also specify the filter should run on one or more routes within the routes file itself:</p> <pre><code>$routes-&gt;group('api', ['filter' =&gt; 'tokens'], function($routes) {\n    //\n});\n$routes-&gt;get('users', 'UserController::list', ['filter' =&gt; 'tokens:users-read']);</code></pre> <p>When the filter runs, it checks the <code>Authorization</code> header for a <code>Bearer</code> value that has the raw token. It then hashes the raw token and looks it up in the database. Once found, it can determine the correct user, which will then be available through an <code>auth()-&gt;user()</code> call.</p> <p>Note</p> <p>Currently only a single scope can be used on a route filter. If multiple scopes are passed in, only the first one is checked.</p>"},{"location":"guides/mobile_apps/","title":"Mobile Authentication with Access Tokens","text":"<p>Access Tokens can be used to authenticate mobile applications that are consuming your API. This is similar to how you would work with third-party users of your API, but with small differences in how you would issue the tokens.</p>"},{"location":"guides/mobile_apps/#issuing-the-tokens","title":"Issuing the Tokens","text":"<p>Typically, a mobile application would issue a request from their login screen, passing in the credentials to authenticate with. Once authenticated you would return the <code>raw token</code> within the response and that would be saved on the device to use in following API calls.</p> <p>Start by creating a route that would handle the request from the login screen on the mobile device. The device name can be any arbitrary string, but is typically used to identify the device the request is being made from, like \"Johns iPhone 13\".</p> <pre><code>// Routes.php\n$routes-&gt;post('auth/token', '\\App\\Controllers\\Auth\\LoginController::mobileLogin');</code></pre> <pre><code>&lt;?php\n\n// app/Controllers/Auth/LoginController.php\n\nnamespace App\\Controllers\\Auth;\n\nuse App\\Controllers\\BaseController;\n\nclass LoginController extends BaseController\n{\n    public function mobileLogin()\n    {\n        // Validate credentials\n        $rules = setting('Validation.login') ?? [\n            'email' =&gt; config('Auth')-&gt;emailValidationRules,\n            'password' =&gt; [\n                'label' =&gt; 'Auth.password',\n                'rules' =&gt; 'required',\n            ],\n            'device_name' =&gt; [\n                'label' =&gt; 'Device Name',\n                'rules' =&gt; 'required|string',\n            ],\n        ];\n\n        if (! $this-&gt;validateData($this-&gt;request-&gt;getPost(), $rules, [], config('Auth')-&gt;DBGroup)) {\n            return $this-&gt;response\n                -&gt;setJSON(['errors' =&gt; $this-&gt;validator-&gt;getErrors()])\n                -&gt;setStatusCode(401);\n        }\n\n        // Get the credentials for login\n        $credentials             = $this-&gt;request-&gt;getPost(setting('Auth.validFields'));\n        $credentials             = array_filter($credentials);\n        $credentials['password'] = $this-&gt;request-&gt;getPost('password');\n\n        // Attempt to login\n        $result = auth()-&gt;attempt($credentials);\n        if (! $result-&gt;isOK()) {\n            return $this-&gt;response\n                -&gt;setJSON(['error' =&gt; $result-&gt;reason()])\n                -&gt;setStatusCode(401);\n        }\n\n        // Generate token and return to client\n        $token = auth()-&gt;user()-&gt;generateAccessToken(service('request')-&gt;getVar('device_name'));\n\n        return $this-&gt;response\n            -&gt;setJSON(['token' =&gt; $token-&gt;raw_token]);\n    }\n}</code></pre> <p>When making all future requests to the API, the mobile client should return the raw token in the <code>Authorization</code> header as a <code>Bearer</code> token.</p> <p>Note</p> <p>By default, <code>$authenticatorHeader['tokens']</code> is set to <code>Authorization</code>. You can change the header name by setting the <code>$authenticatorHeader['tokens']</code> value in the app/Config/AuthToken.php config file. e.g. if <code>$authenticatorHeader['tokens']</code> is set to <code>PersonalAccessCodes</code> then the mobile client should return the raw token in the <code>PersonalAccessCodes</code> header as a <code>Bearer</code> token.</p>"},{"location":"guides/strengthen_password/","title":"How to Strengthen the Password","text":"<p>Shield allows you to customize password-related settings to make your passwords more secure.</p>"},{"location":"guides/strengthen_password/#minimum-password-length","title":"Minimum Password Length","text":"<p>The most important factor when it comes to passwords is the number of characters in the password. You can check password strength with Password Strength Testing Tool. Short passwords may be cracked in less than one day.</p> <p>In Shield, you can set the users' minimum password length. The setting is <code>$minimumPasswordLength</code> in <code>app/Config/Auth.php</code>. The default value is 8 characters. It is the recommended minimum value by NIST. However, some organizations recommend 12 to 14 characters.</p> <p>The longer the password, the stronger it is. Consider increasing the value.</p> <p>Note</p> <p>This checking works when you validate passwords with the <code>strong_password[]</code> validation rule. If you disable <code>CompositionValidator</code> (enabled by default) in <code>$passwordValidators</code>, this checking will not work.</p>"},{"location":"guides/strengthen_password/#password-hashing-algorithm","title":"Password Hashing Algorithm","text":"<p>You can change the password hashing algorithm by <code>$hashAlgorithm</code> in <code>app/Config/Auth.php</code>. The default value is <code>PASSWORD_DEFAULT</code> that is <code>PASSWORD_BCRYPT</code> at the time of writing.</p> <p><code>PASSWORD_BCRYPT</code> means to create new password hashes using the bcrypt algorithm.</p> <p>You can use <code>PASSWORD_ARGON2ID</code> if your PHP has been compiled with Argon2 support.</p>"},{"location":"guides/strengthen_password/#password_bcrypt","title":"PASSWORD_BCRYPT","text":"<p><code>PASSWORD_BCRYPT</code> has one configuration <code>$hashCost</code>. The bigger the cost, hashed passwords will be the stronger.</p> <p>You can find your appropriate cost with the following code:</p> <pre><code>&lt;?php\n/**\n * This code will benchmark your server to determine how high of a cost you can\n * afford. You want to set the highest cost that you can without slowing down\n * you server too much. 8-10 is a good baseline, and more is good if your servers\n * are fast enough. The code below aims for \u2264 50 milliseconds stretching time,\n * which is a good baseline for systems handling interactive logins.\n *\n * From: https://www.php.net/manual/en/function.password-hash.php#refsect1-function.password-hash-examples\n */\n$timeTarget = 0.05; // 50 milliseconds\n\n$cost = 8;\ndo {\n    $cost++;\n    $start = microtime(true);\n    password_hash(\"test\", PASSWORD_BCRYPT, [\"cost\" =&gt; $cost]);\n    $end = microtime(true);\n} while (($end - $start) &lt; $timeTarget);\n\necho \"Appropriate Cost Found: \" . $cost;</code></pre>"},{"location":"guides/strengthen_password/#limitations","title":"Limitations","text":"<p>There are two limitations when you use <code>PASSWORD_BCRYPT</code>:</p> <ol> <li>the password will be truncated to a maximum length of 72 bytes.</li> <li>the password will be truncated at the first NULL byte (<code>\\0</code>).</li> </ol>"},{"location":"guides/strengthen_password/#72-byte-issue","title":"72 byte issue","text":"<p>If a user submits a password longer than 72 bytes, the validation error will occur. If this behavior is unacceptable, consider:</p> <ol> <li>change the hashing algorithm to <code>PASSWORD_ARGON2ID</code>. It does not have such a limitation.</li> </ol>"},{"location":"guides/strengthen_password/#null-byte-issue","title":"NULL byte issue","text":"<p>This is because <code>PASSWORD_BCRYPT</code> is not binary-safe. Normal users cannot send NULL bytes in a password string, so this is not a problem in most cases.</p> <p>But if this behavior is unacceptable, consider:</p> <ol> <li>adding a validation rule to prohibit NULL bytes or control codes.</li> <li>or change the hashing algorithm to <code>PASSWORD_ARGON2ID</code>. It is binary-safe.</li> </ol>"},{"location":"guides/strengthen_password/#password_argon2id","title":"PASSWORD_ARGON2ID","text":"<p><code>PASSWORD_ARGON2ID</code> has three configuration <code>$hashMemoryCost</code>, <code>$hashTimeCost</code>, and <code>$hashThreads</code>.</p> <p>If you use <code>PASSWORD_ARGON2ID</code>, you should use PHP's constants:</p> <pre><code>public int $hashMemoryCost = PASSWORD_ARGON2_DEFAULT_MEMORY_COST;\n\npublic int $hashTimeCost = PASSWORD_ARGON2_DEFAULT_TIME_COST;\npublic int $hashThreads  = PASSWORD_ARGON2_DEFAULT_THREADS;</code></pre>"},{"location":"guides/strengthen_password/#maximum-password-length","title":"Maximum Password Length","text":"<p>By default, Shield has the validation rules for maximum password length.</p> <ul> <li>72 bytes for PASSWORD_BCRYPT</li> <li>255 characters for others</li> </ul> <p>You can customize the validation rule. See Customizing Validation Rules.</p>"},{"location":"guides/strengthen_password/#supportolddangerouspassword","title":"$supportOldDangerousPassword","text":"<p>In <code>app/Config/Auth.php</code> there is <code>$supportOldDangerousPassword</code>, which is a setting for using passwords stored in older versions of Shield that were vulnerable.</p> <p>This setting is deprecated.  If you have this setting set to <code>true</code>, you should change it to <code>false</code> as soon as possible, and remove old hashed password in your database.</p> <p>Note</p> <p>This setting will be removed in v1.0.0 official release.</p>"},{"location":"quick_start_guide/using_authorization/","title":"Using Authorization","text":""},{"location":"quick_start_guide/using_authorization/#configuration","title":"Configuration","text":""},{"location":"quick_start_guide/using_authorization/#change-available-groups","title":"Change Available Groups","text":"<p>The available groups are defined in the app/Config/AuthGroups.php config file, under the <code>$groups</code> property. Add new entries to the array, or remove existing ones to make them available throughout your application.</p> <pre><code>public array $groups = [\n    'superadmin' =&gt; [\n        'title'       =&gt; 'Super Admin',\n        'description' =&gt; 'Complete control of the site.',\n    ],\n    //\n];</code></pre>"},{"location":"quick_start_guide/using_authorization/#set-the-default-group","title":"Set the Default Group","text":"<p>When a user registers on your site, they are assigned the group specified at <code>Config\\AuthGroups::$defaultGroup</code>. Change this to one of the keys in the <code>$groups</code> array to update this.</p>"},{"location":"quick_start_guide/using_authorization/#change-available-permissions","title":"Change Available Permissions","text":"<p>The permissions on the site are stored in the <code>AuthGroups</code> config file also. Each one is defined by a string that represents a context and a permission, joined with a decimal point.</p> <pre><code>public array $permissions = [\n    'admin.access'        =&gt; 'Can access the sites admin area',\n    'admin.settings'      =&gt; 'Can access the main site settings',\n    'users.manage-admins' =&gt; 'Can manage other admins',\n    'users.create'        =&gt; 'Can create new non-admin users',\n    'users.edit'          =&gt; 'Can edit existing non-admin users',\n    'users.delete'        =&gt; 'Can delete existing non-admin users',\n    'beta.access'         =&gt; 'Can access beta-level features',\n];</code></pre>"},{"location":"quick_start_guide/using_authorization/#assign-permissions-to-a-group","title":"Assign Permissions to a Group","text":"<p>Each group can have its own specific set of permissions. These are defined in <code>Config\\AuthGroups::$matrix</code>. You can specify each permission by it's full name, or using the context and an asterisk (*) to specify all permissions within that context.</p> <pre><code>public array $matrix = [\n    'superadmin' =&gt; [\n        'admin.*',\n        'users.*',\n        'beta.access',\n    ],\n    //\n];</code></pre>"},{"location":"quick_start_guide/using_authorization/#assign-permissions-to-a-user","title":"Assign Permissions to a User","text":"<p>Permissions can also be assigned directly to a user, regardless of what groups they belong to. This is done programatically on the <code>User</code> Entity.</p> <pre><code>$user = auth()-&gt;user();\n\n$user-&gt;addPermission('users.create', 'beta.access');</code></pre> <p>This will add all new permissions. You can also sync permissions so that the user ONLY has the given permissions directly assigned to them. Any not in the provided list are removed from the user.</p> <pre><code>$user = auth()-&gt;user();\n\n$user-&gt;syncPermissions('users.create', 'beta.access');</code></pre>"},{"location":"quick_start_guide/using_authorization/#check-if-a-user-has-permission","title":"Check If a User Has Permission","text":"<p>When you need to check if a user has a specific permission use the <code>can()</code> method on the <code>User</code> entity. This method checks permissions within the groups they belong to and permissions directly assigned to the user.</p> <pre><code>if (! auth()-&gt;user()-&gt;can('users.create')) {\n    return redirect()-&gt;back()-&gt;with('error', 'You do not have permissions to access that page.');\n}</code></pre> <p>Note</p> <p>The example above can also be done through a controller filter if you want to apply it to multiple pages of your site.</p>"},{"location":"quick_start_guide/using_authorization/#adding-a-group-to-a-user","title":"Adding a Group To a User","text":"<p>Groups are assigned to a user via the <code>addGroup()</code> method. You can pass multiple groups in and they will all be assigned to the user.</p> <pre><code>$user = auth()-&gt;user();\n$user-&gt;addGroup('admin', 'beta');</code></pre> <p>This will add all new groups. You can also sync groups so that the user ONLY belongs to the groups directly assigned to them. Any not in the provided list are removed from the user.</p> <pre><code>$user = auth()-&gt;user();\n$user-&gt;syncGroups('admin', 'beta');</code></pre>"},{"location":"quick_start_guide/using_authorization/#removing-a-group-from-a-user","title":"Removing a Group From a User","text":"<p>Groups are removed from a user via the <code>removeGroup()</code> method. Multiple groups may be removed at once by passing all of their names into the method.</p> <pre><code>$user = auth()-&gt;user();\n$user-&gt;removeGroup('admin', 'beta');</code></pre>"},{"location":"quick_start_guide/using_authorization/#checking-if-user-belongs-to-a-group","title":"Checking If User Belongs To a Group","text":"<p>You can check if a user belongs to a group with the <code>inGroup()</code> method.</p> <pre><code>$user = auth()-&gt;user();\nif ($user-&gt;inGroup('admin')) {\n    // do something\n}</code></pre> <p>You can pass more than one group to the method and it will return <code>true</code> if the user belongs to any of the specified groups.</p> <pre><code>$user = auth()-&gt;user();\nif ($user-&gt;inGroup('admin', 'beta')) {\n    // do something\n}</code></pre>"},{"location":"quick_start_guide/using_session_auth/","title":"Using Session Authenticator","text":"<p>Session authenticator provides traditional ID/Password authentication.</p> <p>Learning any new authentication system can be difficult, especially as they get more flexible and sophisticated. This guide is intended to provide short examples for common actions you'll take when working with Shield. It is not intended to be the exhaustive documentation for each section. That's better handled through the area-specific doc files.</p> <p>Note</p> <p>The examples assume that you have run the setup script and that you have copies of the <code>Auth</code> and <code>AuthGroups</code> config files in your application's app/Config folder.</p>"},{"location":"quick_start_guide/using_session_auth/#configuration","title":"Configuration","text":""},{"location":"quick_start_guide/using_session_auth/#configure-redirect-urls","title":"Configure Redirect URLs","text":"<p>If you need to redirect everyone to a single URL after login/logout/register actions, you can modify the <code>Config\\Auth::$redirects</code> array in app/Config/Auth.php to specify the url to redirect to.</p> <p>By default, a successful login or register attempt will all redirect to <code>/</code>, while a logout action will redirect to a named route <code>login</code> or a URI path <code>/login</code>. You can change the default URLs used within the app/Config/Auth.php config file:</p> <pre><code>public array $redirects = [\n    'register' =&gt; '/',\n    'login'    =&gt; '/',\n    'logout'   =&gt; 'login',\n];</code></pre> <p>Note</p> <p>This redirect happens after the specified action is complete. In the case of register or login, it might not happen immediately. For example, if you have any Auth Actions specified, they will be redirected when those actions are completed successfully. If no Auth Actions are specified, they will be redirected immediately after registration or login.</p>"},{"location":"quick_start_guide/using_session_auth/#configure-remember-me-functionality","title":"Configure Remember-me Functionality","text":"<p>Remember-me functionality is enabled by default. While this is handled in a secure manner, some sites may want it disabled. You might also want to change how long it remembers a user and doesn't require additional login.</p> <pre><code>public array $sessionConfig = [\n    'field'              =&gt; 'user',\n    'allowRemembering'   =&gt; true,\n    'rememberCookieName' =&gt; 'remember',\n    'rememberLength'     =&gt; 30 * DAY,\n];</code></pre>"},{"location":"quick_start_guide/using_session_auth/#enable-account-activation-via-email","title":"Enable Account Activation via Email","text":"<p>Note</p> <p>You need to configure app/Config/Email.php to allow Shield to send emails. See Installation.</p> <p>By default, once a user registers they have an active account that can be used. You can enable Shield's built-in, email-based activation flow within the <code>Auth</code> config file.</p> <pre><code>public array $actions = [\n    'register' =&gt; \\CodeIgniter\\Shield\\Authentication\\Actions\\EmailActivator::class,\n    'login'    =&gt; null,\n];</code></pre>"},{"location":"quick_start_guide/using_session_auth/#enable-two-factor-authentication","title":"Enable Two-Factor Authentication","text":"<p>Note</p> <p>You need to configure app/Config/Email.php to allow Shield to send emails. See Installation.</p> <p>Turned off by default, Shield's Email-based 2FA can be enabled by specifying the class to use in the <code>Auth</code> config file.</p> <pre><code>public array $actions = [\n    'register' =&gt; null,\n    'login'    =&gt; \\CodeIgniter\\Shield\\Authentication\\Actions\\Email2FA::class,\n];</code></pre>"},{"location":"quick_start_guide/using_session_auth/#customizing-routes","title":"Customizing Routes","text":"<p>If you need to customize how any of the auth features are handled, you can still use the <code>service('auth')-&gt;routes()</code> helper, but you will need to pass the <code>except</code> option with a list of routes to customize:</p> <pre><code>service('auth')-&gt;routes($routes, ['except' =&gt; ['login', 'register']]);</code></pre> <p>Then add the routes to your customized controllers:</p> <pre><code>$routes-&gt;get('login', '\\App\\Controllers\\Auth\\LoginController::loginView');\n$routes-&gt;get('register', '\\App\\Controllers\\Auth\\RegisterController::registerView');</code></pre> <p>Check your routes with the spark routes command.</p>"},{"location":"quick_start_guide/using_session_auth/#protecting-pages","title":"Protecting Pages","text":"<p>By default, Shield does not protect pages. To make certain pages accessible only to logged-in users, set the <code>session</code> controller filter.</p> <p>For example, if you want to limit all routes (e.g. <code>localhost:8080/admin</code>, <code>localhost:8080/panel</code> and ...), you need to add the following code in the app/Config/Filters.php file.</p> <pre><code>public $globals = [\n    'before' =&gt; [\n        // ...\n        'session' =&gt; ['except' =&gt; ['login*', 'register', 'auth/a/*', 'logout']],\n    ],\n    // ...\n];</code></pre> <p>Note</p> <p>The filter <code>$aliases</code> that Shield provides are automatically added for you by the Registrar class located at src/Config/Registrar.php. So you don't need to add in your app/Config/Filters.php.</p> <p>Check your filters with the spark routes command.</p>"},{"location":"references/authorization/","title":"Authorization","text":"<p>Authorization happens once a user has been identified through authentication. It is the process of determining what actions a user is allowed to do within your site.</p> <p>Shield provides a flexible role-based access control (RBAC) that allows users to belong to multiple groups at once. Groups can be thought of as traditional roles (admin, moderator, user, etc), but can also group people together around features, like Beta feature access, or used to provide discrete groups of users within a forum, etc.</p>"},{"location":"references/authorization/#defining-available-groups","title":"Defining Available Groups","text":"<p>Groups are defined within the <code>Shield\\Config\\AuthGroups</code> config class.</p> <pre><code>public array $groups = [\n    'superadmin' =&gt; [\n        'title'       =&gt; 'Super Admin',\n        'description' =&gt; 'Optional description of the group.',\n    ],\n];</code></pre> <p>The key of the <code>$groups</code> array is the common term of the group. This is what you would call when referencing the group elsewhere, like checking if <code>$user-&gt;inGroup('superadmin')</code>. By default, the following groups are available: <code>superadmin</code>, <code>admin</code>, <code>developer</code>, <code>user</code>, and <code>beta</code>.</p>"},{"location":"references/authorization/#default-user-group","title":"Default User Group","text":"<p>When a user is first registered on the site, they are assigned to a default user group. This group is defined in <code>Config\\AuthGroups::$defaultGroup</code>, and must match the name of one of the defined groups.</p> <pre><code>public string $defaultGroup = 'user';</code></pre>"},{"location":"references/authorization/#defining-available-permissions","title":"Defining Available Permissions","text":"<p>All permissions must be added to the <code>AuthGroups</code> config file, also. A permission is simply a string consisting of a scope and action, like <code>users.create</code>. The scope would be <code>users</code> and the action would be <code>create</code>. Each permission can have a description for display within UIs if needed.</p> <pre><code>public array $permissions = [\n    'admin.access'        =&gt; 'Can access the sites admin area',\n    'admin.settings'      =&gt; 'Can access the main site settings',\n    'users.manage-admins' =&gt; 'Can manage other admins',\n    'users.create'        =&gt; 'Can create new non-admin users',\n    'users.edit'          =&gt; 'Can edit existing non-admin users',\n    'users.delete'        =&gt; 'Can delete existing non-admin users',\n    'beta.access'         =&gt; 'Can access beta-level features'\n];</code></pre>"},{"location":"references/authorization/#assigning-permissions-to-groups","title":"Assigning Permissions to Groups","text":"<p>In order to grant any permissions to a group, they must have the permission assigned to the group, within the <code>AuthGroups</code> config file, under the <code>$matrix</code> property.</p> <p>Note</p> <p>This defines group-level permissons.</p> <p>The matrix is an associative array with the group name as the key, and an array of permissions that should be applied to that group.</p> <pre><code>public array $matrix = [\n    'admin' =&gt; [\n        'admin.access',\n        'users.create', 'users.edit', 'users.delete',\n        'beta.access'\n    ],\n];</code></pre> <p>You can use a wildcard within a scope to allow all actions within that scope, by using a <code>*</code> in place of the action.</p> <pre><code>public array $matrix = [\n    'superadmin' =&gt; ['admin.*', 'users.*', 'beta.*'],\n];</code></pre>"},{"location":"references/authorization/#authorizing-users","title":"Authorizing Users","text":"<p>The <code>Authorizable</code> trait on the <code>User</code> entity provides the following methods to authorize your users.</p>"},{"location":"references/authorization/#can","title":"can()","text":"<p>Allows you to check if a user is permitted to do a specific action or group or actions. The permission string(s) should be passed as the argument(s). Returns boolean <code>true</code>/<code>false</code>. Will check the user's direct permissions (user-level permissions) first, and then check against all of the user's groups permissions (group-level permissions) to determine if they are allowed.</p> <pre><code>if ($user-&gt;can('users.create')) {\n    //\n}\n\n// If multiple permissions are specified, true is returned if the user has any of them.\nif ($user-&gt;can('users.create', 'users.edit')) {\n    //\n}</code></pre>"},{"location":"references/authorization/#ingroup","title":"inGroup()","text":"<p>Checks if the user is in one of the groups passed in. Returns boolean <code>true</code>/<code>false</code>.</p> <pre><code>if (! $user-&gt;inGroup('superadmin', 'admin')) {\n    //\n}</code></pre>"},{"location":"references/authorization/#haspermission","title":"hasPermission()","text":"<p>Checks to see if the user has the permission set directly on themselves. This disregards any groups they are part of.</p> <pre><code>if (! $user-&gt;hasPermission('users.create')) {\n    //\n}</code></pre> <p>Note</p> <p>This method checks only user-level permissions, and does not check group-level permissions. If you want to check if the user can do something, use the <code>$user-&gt;can()</code> method instead.</p>"},{"location":"references/authorization/#authorizing-via-routes","title":"Authorizing via Routes","text":"<p>You can restrict access to a route or route group through a Controller Filter.</p> <p>One is provided for restricting via groups the user belongs to, the other is for permission they need. The filters are automatically registered with the system under the <code>group</code> and <code>permission</code> aliases, respectively.</p> <p>You can set the filters within app/Config/Routes.php:</p> <pre><code>$routes-&gt;group('admin', ['filter' =&gt; 'group:admin,superadmin'], static function ($routes) {\n    $routes-&gt;group(\n        '',\n        ['filter' =&gt; ['group:admin,superadmin', 'permission:users.manage']],\n        static function ($routes) {\n            $routes-&gt;resource('users');\n        }\n    );\n});</code></pre> <p>Note that the options (<code>filter</code>) passed to the outer <code>group()</code> are not merged with the inner <code>group()</code> options.</p> <p>Note</p> <p>If you set more than one filter to a route, you need to enable Multiple Filters.</p>"},{"location":"references/authorization/#managing-user-permissions","title":"Managing User Permissions","text":"<p>Permissions can be granted on a user level as well as on a group level. Any user-level permissions granted will override the group, so it's possible that a user can perform an action that their groups cannot.</p>"},{"location":"references/authorization/#addpermission","title":"addPermission()","text":"<p>Adds one or more user-level permissions to the user. If a permission doesn't exist, a <code>CodeIgniter\\Shield\\Authorization\\AuthorizationException</code> is thrown.</p> <pre><code>$user-&gt;addPermission('users.create', 'users.edit');</code></pre>"},{"location":"references/authorization/#removepermission","title":"removePermission()","text":"<p>Removes one or more user-level permissions from a user. If a permission doesn't exist, a <code>CodeIgniter\\Shield\\Authorization\\AuthorizationException</code> is thrown.</p> <pre><code>$user-&gt;removePermission('users.delete');</code></pre>"},{"location":"references/authorization/#syncpermissions","title":"syncPermissions()","text":"<p>Updates the user's user-level permissions to only include the permissions in the given list. Any existing permissions on that user not in this list will be removed.</p> <pre><code>$user-&gt;syncPermissions('admin.access', 'beta.access');</code></pre>"},{"location":"references/authorization/#getpermissions","title":"getPermissions()","text":"<p>Returns all user-level permissions this user has assigned directly to them.</p> <pre><code>$user-&gt;getPermissions();</code></pre> <p>Note</p> <p>This method does not return group-level permissions.</p>"},{"location":"references/authorization/#managing-user-groups","title":"Managing User Groups","text":""},{"location":"references/authorization/#addgroup","title":"addGroup()","text":"<p>Adds one or more groups to a user. If a group doesn't exist, a <code>CodeIgniter\\Shield\\Authorization\\AuthorizationException</code> is thrown.</p> <pre><code>$user-&gt;addGroup('admin', 'beta');</code></pre>"},{"location":"references/authorization/#removegroup","title":"removeGroup()","text":"<p>Removes one or more groups from a user. If a group doesn't exist, a <code>CodeIgniter\\Shield\\Authorization\\AuthorizationException</code> is thrown.</p> <pre><code>$user-&gt;removeGroup('admin', 'beta');</code></pre>"},{"location":"references/authorization/#syncgroups","title":"syncGroups()","text":"<p>Updates the user's groups to only include the groups in the given list. Any existing groups on that user not in this list will be removed.</p> <pre><code>$user-&gt;syncGroups('admin', 'beta');</code></pre>"},{"location":"references/authorization/#getgroups","title":"getGroups()","text":"<p>Returns all groups this user is a part of.</p> <pre><code>$user-&gt;getGroups();</code></pre>"},{"location":"references/authorization/#user-activation","title":"User Activation","text":"<p>All users have an <code>active</code> flag. This is only used when the <code>EmailActivation</code> action, or a custom action used to activate a user, is enabled.</p>"},{"location":"references/authorization/#checking-activation-status","title":"Checking Activation Status","text":"<p>You can determine if a user has been activated with the <code>isActivated()</code> method.</p> <pre><code>if ($user-&gt;isActivated()) {\n    //\n}</code></pre> <p>Note</p> <p>If no activator is specified in the <code>Auth</code> config file, <code>actions['register']</code> property, then this will always return <code>true</code>.</p> <p>You can check if a user has not been activated yet via the <code>isNotActivated()</code> method.</p> <pre><code>if ($user-&gt;isNotActivated()) {\n    //\n}</code></pre>"},{"location":"references/authorization/#activating-a-user","title":"Activating a User","text":"<p>Users are automatically activated within the <code>EmailActivator</code> action. They can be manually activated via the <code>activate()</code> method on the <code>User</code> entity.</p> <pre><code>$user-&gt;activate();</code></pre>"},{"location":"references/authorization/#deactivating-a-user","title":"Deactivating a User","text":"<p>Users can be manually deactivated via the <code>deactivate()</code> method on the <code>User</code> entity.</p> <pre><code>$user-&gt;deactivate();</code></pre>"},{"location":"references/controller_filters/","title":"Controller Filters","text":""},{"location":"references/controller_filters/#provided-filters","title":"Provided Filters","text":"<p>Note</p> <p>The filter <code>$aliases</code> that Shield provides are automatically added for you by the Registrar class located at src/Config/Registrar.php. So you don't need to add in your app/Config/Filters.php.</p> <p>The Controller Filters you can use to protect your routes Shield provides are:</p> <pre><code>$aliases = [\n    'session'     =&gt; \\CodeIgniter\\Shield\\Filters\\SessionAuth::class,\n    'tokens'      =&gt; \\CodeIgniter\\Shield\\Filters\\TokenAuth::class,\n    'hmac'        =&gt; \\CodeIgniter\\Shield\\Filters\\HmacAuth::class,\n    'chain'       =&gt; \\CodeIgniter\\Shield\\Filters\\ChainAuth::class,\n    'auth-rates'  =&gt; \\CodeIgniter\\Shield\\Filters\\AuthRates::class,\n    'group'       =&gt; \\CodeIgniter\\Shield\\Filters\\GroupFilter::class,\n    'permission'  =&gt; \\CodeIgniter\\Shield\\Filters\\PermissionFilter::class,\n    'force-reset' =&gt; \\CodeIgniter\\Shield\\Filters\\ForcePasswordResetFilter::class,\n    'jwt'         =&gt; \\CodeIgniter\\Shield\\Filters\\JWTAuth::class,\n];</code></pre> Filters Description session Restricts access to users who are not authenticated by the <code>Session</code> authenticator. tokens Restricts access to users who are not authenticated by the <code>AccessTokens</code> authenticator. chain The filter will check authenticators in sequence to see if the user is logged in through either of authenticators, allowing a single API endpoint to work for both an SPA using session auth, and a mobile app using access tokens. jwt Restricts access to users who are not authenticated by the <code>JWT</code> authenticator. See JWT Authentication. hmac Restricts access to users who are not authenticated by the <code>HMAC</code> authenticator. See HMAC Authentication. auth-rates Provides a good basis for rate limiting of auth-related routes. group Checks if the user is in one of the groups passed in. permission Checks if the user has the passed permissions. force-reset Checks if the user requires a password reset. <p>These can be used in any of the normal filter config settings, or within the routes file.</p>"},{"location":"references/controller_filters/#configure-controller-filters","title":"Configure Controller Filters","text":""},{"location":"references/controller_filters/#protect-all-pages","title":"Protect All Pages","text":"<p>If you want to limit all routes (e.g. <code>localhost:8080/admin</code>, <code>localhost:8080/panel</code> and ...), you need to add the following code in the app/Config/Filters.php file.</p> <pre><code>public $globals = [\n    'before' =&gt; [\n        // ...\n        'session' =&gt; ['except' =&gt; ['login*', 'register', 'auth/a/*', 'logout']],\n    ],\n    // ...\n];</code></pre>"},{"location":"references/controller_filters/#rate-limiting","title":"Rate Limiting","text":"<p>To help protect your authentication forms from being spammed by bots, it is recommended that you use the <code>auth-rates</code> filter on all of your authentication routes. This can be done with the following filter setup:</p> <pre><code>public $filters = [\n    'auth-rates' =&gt; [\n        'before' =&gt; [\n            'login*', 'register', 'auth/*'\n        ]\n    ]\n];</code></pre>"},{"location":"references/controller_filters/#forcing-password-reset","title":"Forcing Password Reset","text":"<p>If your application requires a force password reset functionality, ensure that you exclude the auth pages and the actual password reset page from the <code>before</code> global. This will ensure that your users do not run into a too many redirects error. See:</p> <p><pre><code>public $globals = [\n    'before' =&gt; [\n        //...\n        //...\n        'force-reset' =&gt; ['except' =&gt; ['login*', 'register', 'auth/a/*', 'change-password', 'logout']]\n    ]\n];</code></pre> In the example above, it is assumed that the page you have created for users to change their password after successful login is change-password.</p> <p>Note</p> <p>If you have grouped or changed the default format of the routes, ensure that your code matches the new format(s) in the app/Config/Filter.php file.</p> <p>For example, if you configured your routes like so:</p> <pre><code>$routes-&gt;group('accounts', static function($routes) {\n    service('auth')-&gt;routes($routes);\n});</code></pre> <p>Then the global <code>before</code> filter for <code>session</code> should look like so:</p> <pre><code>public $globals = [\n    'before' =&gt; [\n        // ...\n        'session' =&gt; ['except' =&gt; ['accounts/login*', 'accounts/register', 'accounts/auth/a/*', 'accounts/logout']]\n    ]\n]</code></pre> <p>The same should apply for the Rate Limiting and Forcing Password Reset.</p>"},{"location":"references/events/","title":"Events","text":"<p>Shield fires off several events during the lifecycle of the application that your code can tap into.</p>"},{"location":"references/events/#responding-to-events","title":"Responding to Events","text":"<p>When you want to respond to an event that Shield publishes, you will need to add it to your app/Config/Events.php file. Each of the following events provides a sample for responding that uses a class and method name. Other methods are available. See the CodeIgniter 4 User Guide for more information.</p>"},{"location":"references/events/#event-list","title":"Event List","text":""},{"location":"references/events/#register","title":"register","text":"<p>Triggered when a new user has registered in the system. The only argument is the <code>User</code> entity itself.</p> <pre><code>Events::trigger('register', $user);\n\nEvents::on('register', 'SomeLibrary::handleRegister');</code></pre>"},{"location":"references/events/#login","title":"login","text":"<p>Fired immediately after a successful login. The only argument is the <code>User</code> entity.</p> <pre><code>Events::trigger('login', $user);\n\nEvents::on('login', 'SomeLibrary::handleLogin');</code></pre>"},{"location":"references/events/#failedlogin","title":"failedLogin","text":"<p>Triggered when a login attempt fails. It provides an array containing the credentials the user attempted to sign in with, with the password removed from the array.</p> <pre><code>// Original credentials array\n$credentials = ['email' =&gt; 'foo@example.com', 'password' =&gt; 'secret123'];\n\nEvents::on('failedLogin', function($credentials) {\n    dd($credentials);\n});\n\n// Outputs: ['email' =&gt; 'foo@example.com'];</code></pre> <p>When the magic link login fails, the following array will be provided:</p> <pre><code>['magicLinkToken' =&gt; 'the token value used']</code></pre>"},{"location":"references/events/#logout","title":"logout","text":"<p>Fired immediately after a successful logout. The only argument is the <code>User</code> entity.</p>"},{"location":"references/events/#magiclogin","title":"magicLogin","text":"<p>Fired when a user has been successfully logged in via a magic link. This event does not have any parameters passed in. The authenticated user can be discovered through the <code>auth()</code> helper.</p> <pre><code>Events::on('magicLogin', function() {\n    $user = auth()-&gt;user();\n\n    //\n})</code></pre>"},{"location":"references/events/#event-timing","title":"Event Timing","text":"<p>To learn more about Event timing, please see the list below.</p> <ul> <li>Session Authenticator.</li> </ul>"},{"location":"references/magic_link_login/","title":"Magic Link Login","text":"<p>Magic Link Login is a feature that allows users to log in if they forget their password.</p>"},{"location":"references/magic_link_login/#configuration","title":"Configuration","text":""},{"location":"references/magic_link_login/#configure-magic-link-login-functionality","title":"Configure Magic Link Login Functionality","text":"<p>Magic Link Login functionality is enabled by default. You can change it within the app/Config/Auth.php file.</p> <pre><code>public bool $allowMagicLinkLogins = true;</code></pre>"},{"location":"references/magic_link_login/#magic-link-lifetime","title":"Magic Link Lifetime","text":"<p>By default, Magic Link can be used for 1 hour. This can be easily modified in the app/Config/Auth.php file.</p> <pre><code>public int $magicLinkLifetime = HOUR;</code></pre>"},{"location":"references/magic_link_login/#responding-to-magic-link-logins","title":"Responding to Magic Link Logins","text":"<p>Note</p> <p>You need to configure app/Config/Email.php to allow Shield to send emails. See Installation.</p> <p>Magic Link logins allow a user that has forgotten their password to have an email sent with a unique, one-time login link. Once they've logged in you can decide how to respond. In some cases, you might want to redirect them to a special page where they must choose a new password. In other cases, you might simply want to display a one-time message prompting them to go to their account page and choose a new password.</p>"},{"location":"references/magic_link_login/#session-notification","title":"Session Notification","text":"<p>You can detect if a user has finished the magic link login by checking for a session value, <code>magicLogin</code>. If they have recently completed the flow, it will exist and have a value of <code>true</code>.</p> <pre><code>if (session('magicLogin')) {\n    return redirect()-&gt;route('set_password');\n}</code></pre> <p>This value sticks around in the session for 5 minutes. Once you no longer need to take any actions, you might want to delete the value from the session.</p> <pre><code>session()-&gt;removeTempdata('magicLogin');</code></pre>"},{"location":"references/magic_link_login/#event","title":"Event","text":"<p>At the same time the above session variable is set, a <code>magicLogin</code> event is fired off that you may subscribe to. Note that no data is passed to the event as you can easily grab the current user from the <code>user()</code> helper or the <code>auth()-&gt;user()</code> method.</p> <pre><code>Events::on('magicLogin', static function () {\n    // ...\n});</code></pre>"},{"location":"references/testing/","title":"Testing","text":""},{"location":"references/testing/#http-feature-testing","title":"HTTP Feature Testing","text":"<p>When performing HTTP Feature Testing in your applications, you will often need to ensure you are logged in to check security, or simply to access protected locations. Shield provides the <code>AuthenticationTesting</code> trait to help you out. Use it within the test class and then you can use the <code>actingAs()</code> method that takes a User instance. This user will be logged in during the test.</p> <pre><code>&lt;?php\n\nuse CodeIgniter\\Shield\\Test\\AuthenticationTesting;\nuse Tests\\Support\\TestCase;\nuse CodeIgniter\\Shield\\Authentication\\Actions\\Email2FA;\n\nclass ActionsTest extends TestCase\n{\n    use DatabaseTestTrait;\n    use FeatureTestTrait;\n    use AuthenticationTesting;\n\n    public function testEmail2FAShow()\n    {\n        $result = $this-&gt;actingAs($this-&gt;user)\n           -&gt;withSession([\n               'auth_action' =&gt; Email2FA::class,\n           ])-&gt;get('/auth/a/show');\n\n        $result-&gt;assertStatus(200);\n        // Should auto-populate in the form\n        $result-&gt;assertSee($this-&gt;user-&gt;email);\n    }\n}</code></pre>"},{"location":"references/testing/#improving-the-speed-of-running-tests","title":"Improving the Speed of Running Tests","text":"<p>By default, Shield has set the <code>Config\\Auth::$hashCost = 12</code> due to the greater security of passwords. However, to increase the test execution time, we have set the <code>$hashCost = 4</code> for the test environment.</p> <p>If you use Shield in your project and your tests execution time is high, just set the <code>$hashCost = 4</code> in file phpunit.xml.dist of your project as follows:</p> <pre><code>&lt;php&gt;\n    &lt;!-- Set hashCost for improving the speed of running tests --&gt;\n    &lt;env name=\"auth.hashCost\" value=\"4\"/&gt;\n&lt;/php&gt;</code></pre>"},{"location":"references/authentication/auth_actions/","title":"Authentication Actions","text":"<p>Authentication Actions are a way to group actions that can happen after login or registration. Shield ships with two actions you can use, and makes it simple for you to define your own.</p> <ol> <li>Email-based Account Activation (EmailActivate) confirms a new user's email address by    sending them an email with a link they must follow in order to have their account activated.</li> <li>Email-based Two Factor Authentication (Email2FA) will send a 6-digit code to the user's     email address that they must confirm before they can continue.</li> </ol>"},{"location":"references/authentication/auth_actions/#configuring-actions","title":"Configuring Actions","text":"<p>Actions are setup in the <code>Auth</code> config file, with the <code>$actions</code> variable.</p> <pre><code>public array $actions = [\n    'register' =&gt; null,\n    'login'    =&gt; null,\n];</code></pre> <p>To define an action to happen you will specify the class name as the value for the appropriate task:</p> <pre><code>public array $actions = [\n    'register' =&gt; \\CodeIgniter\\Shield\\Authentication\\Actions\\EmailActivator::class,\n    'login'    =&gt; \\CodeIgniter\\Shield\\Authentication\\Actions\\Email2FA::class,\n];</code></pre> <p>You must register actions in the order of the actions to be performed. Once configured, everything should work out of the box.</p> <p>The routes are added with the basic <code>auth()-&gt;routes($routes)</code> call, but can be manually added if you choose not to use this helper method.</p> <pre><code>use CodeIgniter\\Shield\\Controllers\\ActionController;\n\n$routes-&gt;get('auth/a/show', 'ActionController::show');\n$routes-&gt;post('auth/a/handle', 'ActionController::handle');\n$routes-&gt;post('auth/a/verify', 'ActionController::verify');</code></pre> <p>Views for all of these pages are defined in the <code>Auth</code> config file, with the <code>$views</code> array.</p> <pre><code>public $views = [\n    'action_email_2fa'            =&gt; '\\CodeIgniter\\Shield\\Views\\email_2fa_show',\n    'action_email_2fa_verify'     =&gt; '\\CodeIgniter\\Shield\\Views\\email_2fa_verify',\n    'action_email_2fa_email'      =&gt; '\\CodeIgniter\\Shield\\Views\\Email\\email_2fa_email',\n    'action_email_activate_show'  =&gt; '\\CodeIgniter\\Shield\\Views\\email_activate_show',\n    'action_email_activate_email' =&gt; '\\CodeIgniter\\Shield\\Views\\Email\\email_activate_email',\n];</code></pre>"},{"location":"references/authentication/auth_actions/#defining-new-actions","title":"Defining New Actions","text":"<p>While the provided email-based activation and 2FA will work for many sites, others will have different needs, like using SMS to verify or something completely different. Actions have only one requirement: they must implement <code>CodeIgniter\\Shield\\Authentication\\Actions\\ActionInterface</code>.</p> <p>The interface defines three methods for <code>ActionController</code>:</p> <p>show() should display the initial page the user lands on immediately after the authentication task, like login. It will typically display instructions to the user and provide an action to take, like clicking a button to have an email or SMS message sent. You might verify email address or phone numbers here.</p> <p>handle() is the next page the user would land on and can be used to handle the action the <code>show()</code> told the user would be happening. For example, in the <code>Email2FA</code> class, this method generates the code, sends the email to the user, and then displays the form the user should enter the 6 digit code into.</p> <p>verify() is the final step in the action's journey. It verifies the information the user provided and provides feedback. In the <code>Email2FA</code> class, it verifies the code against what is saved in the database and either sends them back to the previous form to try again or redirects the user to the page that a <code>login</code> task would have redirected them to anyway.</p> <p>All methods should return either a <code>Response</code> or a view string (e.g. using the <code>view()</code> function).</p>"},{"location":"references/authentication/authentication/","title":"Authentication","text":"<p>Authentication is the process of determining that a visitor actually belongs to your website, and identifying them. Shield provides a flexible and secure authentication system for your web apps and APIs.</p>"},{"location":"references/authentication/authentication/#available-authenticators","title":"Available Authenticators","text":"<p>Shield ships with 4 authenticators that will serve several typical situations within web app development. You can see the Authenticator List.</p> <p>The available authenticators are defined in <code>Config\\Auth</code>:</p> <pre><code>public array $authenticators = [\n    // alias  =&gt; classname\n    'session' =&gt; Session::class,\n    'tokens'  =&gt; AccessTokens::class,\n    'hmac'    =&gt; HmacSha256::class,\n    // 'jwt'  =&gt; JWT::class,\n];</code></pre> <p>The default authenticator is also defined in the configuration file, and uses the alias given above:</p> <pre><code>public string $defaultAuthenticator = 'session';</code></pre>"},{"location":"references/authentication/authentication/#auth-helper","title":"Auth Helper","text":"<p>The auth functionality is designed to be used with the <code>auth_helper</code> that comes with Shield.</p> <p>Note</p> <p>The <code>auth_helper</code> is autoloaded by CodeIgniter's autoloader if you follow the installation instruction. If you want to override the functions, create app/Helpers/auth_helper.php.</p>"},{"location":"references/authentication/authentication/#getting-the-current-user","title":"Getting the Current User","text":"<p>The <code>auth()</code> function returns a convenient interface to the most frequently used functionality within the auth libraries.</p> <p>You can get the current <code>User</code> entity.</p> <pre><code>// get the current user\n$user = auth()-&gt;user();\n\n// get the current user's id\n$user_id = auth()-&gt;id();\n// or\n$user_id = user_id();</code></pre> <p>The <code>user_id()</code> function returns the current user's id.</p>"},{"location":"references/authentication/authentication/#getting-the-user-provider","title":"Getting the User Provider","text":"<p>You can also get the User Provider.</p> <pre><code>// get the User Provider (UserModel by default)\n$users = auth()-&gt;getProvider();</code></pre>"},{"location":"references/authentication/authentication/#authenticator-responses","title":"Authenticator Responses","text":"<p>Many of the authenticator methods will return a <code>CodeIgniter\\Shield\\Result</code> class. This provides a consistent way of checking the results and can have additional information returned along with it. The class has the following methods:</p>"},{"location":"references/authentication/authentication/#isok","title":"isOK()","text":"<p>Returns a boolean value stating whether the check was successful or not.</p>"},{"location":"references/authentication/authentication/#reason","title":"reason()","text":"<p>Returns a message that can be displayed to the user when the check fails.</p>"},{"location":"references/authentication/authentication/#extrainfo","title":"extraInfo()","text":"<p>Can return a custom bit of information. These will be detailed in the method descriptions below.</p>"},{"location":"references/authentication/hmac/","title":"HMAC SHA256 Token Authenticator","text":"<p>The HMAC-SHA256 authenticator supports the use of revocable API keys without using OAuth. This provides an alternative to a token that is passed in every request and instead uses a shared secret that is used to sign the request in a secure manner. Like authorization tokens, these are commonly used to provide third-party developers access to your API. These keys typically have a very long expiration time, often years.</p> <p>These are also suitable for use with mobile applications. In this case, the user would register/sign-in with their email/password. The application would create a new access token for them, with a recognizable name, like \"John's iPhone 12\", and return it to the mobile application, where it is stored and used in all future requests.</p> <p>Note</p> <p>For the purpose of this documentation, and to maintain a level of consistency with the Authorization Tokens, the term \"Token\" will be used to represent a set of API Keys (key and secretKey).</p>"},{"location":"references/authentication/hmac/#usage","title":"Usage","text":"<p>In order to use HMAC Keys/Token the <code>Authorization</code> header will be set to the following in the request:</p> <pre><code>Authorization: HMAC-SHA256 &lt;key&gt;:&lt;HMAC-HASH-of-request-body&gt;</code></pre> <p>The code to do this will look something like this:</p> <pre><code>header(\"Authorization: HMAC-SHA256 {$key}:\" . hash_hmac('sha256', $requestBody, $secretKey));</code></pre> <p>Using the CodeIgniter CURLRequest class:</p> <pre><code>&lt;?php\n\n$client = \\Config\\Services::curlrequest();\n\n$key = 'a6c460151b4cabbe1c1d73e08915ce8e';\n$secretKey = '56c85232f0e5b55c05015476cd132c8d';\n$requestBody = '{\"name\":\"John\",\"email\":\"john@example.com\"}';\n\n// $hashValue = b22b0ec11ad61cd4488ab1a09c8a0317e896c22adcc5754ea4cfd0f903a0f8c2\n$hashValue = hash_hmac('sha256', $requestBody, $secretKey);\n\n$response = $client-&gt;setHeader('Authorization', \"HMAC-SHA256 {$key}:{$hashValue}\")\n    -&gt;setBody($requestBody)\n    -&gt;request('POST', 'https://example.com/api');</code></pre>"},{"location":"references/authentication/hmac/#hmac-keysapi-authentication","title":"HMAC Keys/API Authentication","text":"<p>Using HMAC keys requires that you either use/extend <code>CodeIgniter\\Shield\\Models\\UserModel</code> or use the <code>CodeIgniter\\Shield\\Authentication\\Traits\\HasHmacTokens</code> on your own user model. This trait provides all the custom methods needed to implement HMAC keys in your application. The necessary database table, <code>auth_identities</code>, is created in Shield's only migration class, which must be run before first using any of the features of Shield.</p>"},{"location":"references/authentication/hmac/#generating-hmac-access-keys","title":"Generating HMAC Access Keys","text":"<p>Access keys/tokens are created through the <code>generateHmacToken()</code> method on the user. This takes a name to give to the token as the first argument. The name is used to display it to the user, so they can differentiate between multiple tokens.</p> <pre><code>$token = $user-&gt;generateHmacToken('Work Laptop');</code></pre> <p>This creates the keys/tokens using a cryptographically secure random string. The keys operate as shared keys. The 'key' is stored as plain text in the database, the 'secretKey' is stored encrypted. The method returns an instance of <code>CodeIgniters\\Shield\\Authentication\\Entities\\AccessToken</code>. The field <code>secret</code> is the 'key' the field <code>rawSecretKey</code> is the shared 'secretKey'. Both are required to when using this authentication method.</p> <p>The plain text version of these keys should be displayed to the user immediately, so they can copy it for their use. It is recommended that after that only the 'key' field is displayed to a user. If a user loses the 'secretKey', they should be required to generate a new set of keys to use.</p> <pre><code>$token = $user-&gt;generateHmacToken('Work Laptop');\n\necho 'Key: ' . $token-&gt;secret;\necho 'SecretKey: ' . $token-&gt;rawSecretKey;</code></pre>"},{"location":"references/authentication/hmac/#revoking-hmac-keys","title":"Revoking HMAC Keys","text":"<p>HMAC keys can be revoked through the <code>revokeHmacToken()</code> method. This takes the key as the only argument. Revoking simply deletes the record from the database.</p> <pre><code>$user-&gt;revokeHmacToken($key);</code></pre> <p>You can revoke all HMAC Keys with the <code>revokeAllHmacTokens()</code> method.</p> <pre><code>$user-&gt;revokeAllHmacTokens();</code></pre>"},{"location":"references/authentication/hmac/#retrieving-hmac-keys","title":"Retrieving HMAC Keys","text":"<p>The following methods are available to help you retrieve a user's HMAC keys:</p> <pre><code>// Retrieve a set of HMAC Token/Keys by key\n$token = $user-&gt;getHmacToken($key);\n\n// Retrieve an HMAC token/keys by its database ID\n$token = $user-&gt;getHmacTokenById($id);\n\n// Retrieve all HMAC tokens as an array of AccessToken instances.\n$tokens = $user-&gt;hmacTokens();</code></pre>"},{"location":"references/authentication/hmac/#hmac-keys-scopes","title":"HMAC Keys Scopes","text":"<p>Each token (set of keys) can be given one or more scopes they can be used within. These can be thought of as permissions the token grants to the user. Scopes are provided when the token is generated and cannot be modified afterword.</p> <pre><code>$token = $user-&gt;gererateHmacToken('Work Laptop', ['posts.manage', 'forums.manage']);</code></pre> <p>By default, a user is granted a wildcard scope which provides access to all scopes. This is the same as:</p> <pre><code>$token = $user-&gt;gererateHmacToken('Work Laptop', ['*']);</code></pre> <p>During authentication, the HMAC Keys the user used is stored on the user. Once authenticated, you can use the <code>hmacTokenCan()</code> and <code>hmacTokenCant()</code> methods on the user to determine if they have access to the specified scope.</p> <pre><code>if ($user-&gt;hmacTokenCan('posts.manage')) {\n    // do something....\n}\n\nif ($user-&gt;hmacTokenCant('forums.manage')) {\n    // do something....\n}</code></pre>"},{"location":"references/authentication/hmac/#hmac-secret-key-encryption","title":"HMAC Secret Key Encryption","text":"<p>The HMAC Secret Key is stored encrypted. Before you start using HMAC, you will need to set/override the encryption key in <code>$hmacEncryptionKeys</code> in app/Config/AuthToken.php. This should be set using .env and/or system environment variables. Instructions on how to do that can be found in the Setting Your Encryption Key section of the CodeIgniter 4 documentation.</p> <p>You will also be able to adjust the default Driver <code>$hmacEncryptionDefaultDriver</code> and the default Digest <code>$hmacEncryptionDefaultDigest</code>, these default to <code>'OpenSSL'</code> and <code>'SHA512'</code> respectively. These can also be overridden for an individual key by including them in the keys array.</p> <pre><code>public $hmacEncryptionKeys = [\n    'k1' =&gt; [\n        'key' =&gt; 'hex2bin:923dfab5ddca0c7784c2c388a848a704f5e048736c1a852c862959da62ade8c7',\n    ],\n];\n\npublic string $hmacEncryptionCurrentKey    = 'k1';\npublic string $hmacEncryptionDefaultDriver = 'OpenSSL';\npublic string $hmacEncryptionDefaultDigest = 'SHA512';</code></pre> <p>When it is time to update your encryption keys you will need to add an additional key to the above <code>$hmacEncryptionKeys</code> array. Then adjust the <code>$hmacEncryptionCurrentKey</code> to point at the new key.  After the new encryption key is in place, run <code>php spark shield:hmac reencrypt</code> to re-encrypt all existing keys with the new encryption key.  You will need to leave the old key in the array as it will be used read the existing 'Secret Keys' during re-encryption.</p> <pre><code>public $hmacEncryptionKeys = [\n    'k1' =&gt; [\n        'key' =&gt; 'hex2bin:923dfab5ddca0c7784c2c388a848a704f5e048736c1a852c862959da62ade8c7',\n    ],\n    'k2' =&gt; [\n        'key'    =&gt; 'hex2bin:451df599363b19be1434605fff8556a0bbfc50bede1bb33793dcde4d97fce4b0',\n        'digest' =&gt; 'SHA256',\n    ],\n];\n\npublic string $hmacEncryptionCurrentKey    = 'k2';\npublic string $hmacEncryptionDefaultDriver = 'OpenSSL';\npublic string $hmacEncryptionDefaultDigest = 'SHA512';\n</code></pre> <pre><code>php spark shield:hmac reencrypt</code></pre> <p>You can (and should) set these values using environment variable and/or the .env file. To do this you will need to set the values as JSON strings:</p> <pre><code>authtoken.hmacEncryptionKeys = '{\"k1\":{\"key\":\"hex2bin:923dfab5ddca0c7784c2c388a848a704f5e048736c1a852c862959da62ade8c7\"},\"k2\":{\"key\":\"hex2bin:451df599363b19be1434605fff8556a0bbfc50bede1bb33793dcde4d97fce4b0\"}}'\nauthtoken.hmacEncryptionCurrentKey = k2</code></pre> <p>Depending on the set length of the Secret Key and the type of encryption used, it is possible for the encrypted value to exceed the database column character limit of 255 characters. If this happens, creation of a new HMAC identity will throw a <code>RuntimeException</code>.</p>"},{"location":"references/authentication/hmac/#configuration","title":"Configuration","text":"<p>Configure app/Config/AuthToken.php for your needs.</p> <p>Note</p> <p>Shield does not expect you use the Access Token Authenticator and HMAC Authenticator at the same time. Therefore, some Config items are common.</p>"},{"location":"references/authentication/hmac/#hmac-keys-lifetime","title":"HMAC Keys Lifetime","text":"<p>HMAC Keys/Tokens will expire after a specified amount of time has passed since they have been used.</p> <p>By default, this is set to 1 year. You can change this value by setting the <code>$unusedTokenLifetime</code> value. This is in seconds so that you can use the time constants that CodeIgniter provides.</p> <pre><code>public $unusedTokenLifetime = YEAR;</code></pre>"},{"location":"references/authentication/hmac/#login-attempt-logging","title":"Login Attempt Logging","text":"<p>By default, only failed login attempts are recorded in the <code>auth_token_logins</code> table. This can be modified by changing the <code>$recordLoginAttempt</code> value.</p> <pre><code>public int $recordLoginAttempt = Auth::RECORD_LOGIN_ATTEMPT_FAILURE;</code></pre> <p>If you don't want any logs, set it to <code>Auth::RECORD_LOGIN_ATTEMPT_NONE</code>.</p> <p>If you want to log all login attempts, set it to <code>Auth::RECORD_LOGIN_ATTEMPT_ALL</code>. It means you log all requests.</p>"},{"location":"references/authentication/hmac/#logging","title":"Logging","text":"<p>Login attempts are recorded in the <code>auth_token_logins</code> table, according to the configuration above.</p> <p>When a failed login attempt is logged, the raw token value sent is saved in the <code>identifier</code> column.</p> <p>When a successful login attempt is logged, the token name is saved in the <code>identifier</code> column.</p>"},{"location":"references/authentication/session/","title":"Session Authenticator","text":"<p>The Session authenticator stores the user's authentication within the user's session, and on a secure cookie on their device. This is the standard password-based login used in most web sites. It supports a secure remember-me feature, and more. This can also be used to handle authentication for single page applications (SPAs).</p>"},{"location":"references/authentication/session/#method-references","title":"Method References","text":""},{"location":"references/authentication/session/#attempt","title":"attempt()","text":"<p>When a user attempts to login with their email and password, you would call the <code>attempt()</code> method on the auth class, passing in their credentials.</p> <pre><code>$credentials = [\n    'email'    =&gt; $this-&gt;request-&gt;getPost('email'),\n    'password' =&gt; $this-&gt;request-&gt;getPost('password')\n];\n\n$loginAttempt = auth()-&gt;attempt($credentials);\n\nif (! $loginAttempt-&gt;isOK()) {\n    return redirect()-&gt;back()-&gt;with('error', $loginAttempt-&gt;reason());\n}</code></pre> <p>Upon a successful <code>attempt()</code>, the user is logged in. The Response object returned will provide the user that was logged in as <code>extraInfo()</code>.</p> <pre><code>$result = auth()-&gt;attempt($credentials);\n\nif ($result-&gt;isOK()) {\n    $user = $result-&gt;extraInfo();\n}</code></pre> <p>If the attempt fails a <code>failedLogin</code> event is triggered with the credentials array as the only parameter. Whether or not they pass, a login attempt is recorded in the <code>auth_logins</code> table.</p> <p>If <code>allowRemembering</code> is <code>true</code> in the <code>Auth</code> config file, you can tell the Session authenticator to set a secure remember-me cookie.</p> <pre><code>$loginAttempt = auth()-&gt;remember()-&gt;attempt($credentials);</code></pre>"},{"location":"references/authentication/session/#check","title":"check()","text":"<p>If you would like to check a user's credentials without logging them in, you can use the <code>check()</code> method.</p> <pre><code>$credentials = [\n    'email'    =&gt; $this-&gt;request-&gt;getPost('email'),\n    'password' =&gt; $this-&gt;request-&gt;getPost('password')\n];\n\n$validCreds = auth()-&gt;check($credentials);\n\nif (! $validCreds-&gt;isOK()) {\n    return redirect()-&gt;back()-&gt;with('error', $validCreds-&gt;reason());\n}</code></pre> <p>The Result instance returned contains the valid user as <code>extraInfo()</code>.</p>"},{"location":"references/authentication/session/#loggedin","title":"loggedIn()","text":"<p>You can determine if a user is currently logged in with the aptly titled method, <code>loggedIn()</code>.</p> <pre><code>if (auth()-&gt;loggedIn()) {\n    // Do something.\n}</code></pre>"},{"location":"references/authentication/session/#logout","title":"logout()","text":"<p>You can call the <code>logout()</code> method to log the user out of the current session. This will destroy and regenerate the current session, purge any remember-me tokens current for this user, and trigger a <code>logout</code> event.</p> <pre><code>auth()-&gt;logout();</code></pre>"},{"location":"references/authentication/session/#forget","title":"forget()","text":"<p>The <code>forget</code> method will purge all remember-me tokens for the current user, making it so they will not be remembered on the next visit to the site.</p>"},{"location":"references/authentication/session/#events-and-logging","title":"Events and Logging","text":"<p>The following is a list of Events and Logging for Session Authenticator.</p>"},{"location":"references/authentication/session/#register","title":"Register","text":"<ul> <li>Default Register<ul> <li>Post email/username/password<ul> <li>OK \u2192 event <code>register</code> and <code>login</code></li> <li>NG \u2192 no event</li> </ul> </li> </ul> </li> <li>Register with Email Activation<ol> <li>Post email/username/password<ul> <li>OK \u2192 event <code>register</code></li> <li>NG \u2192 no event</li> </ul> </li> <li>Post token<ul> <li>OK \u2192 event <code>login</code></li> <li>NG \u2192 no event</li> </ul> </li> </ol> </li> </ul>"},{"location":"references/authentication/session/#login","title":"Login","text":"<ul> <li>Default Login<ul> <li>Post email/password<ul> <li>OK \u2192 event <code>login</code> / table <code>auth_logins</code></li> <li>NG \u2192 event <code>failedLogin</code> / table <code>auth_logins</code></li> </ul> </li> </ul> </li> <li>Email2FA Login<ol> <li>Post email/password<ul> <li>OK \u2192 no event / table <code>auth_logins</code></li> <li>NG \u2192 event <code>failedLogin</code> / table <code>auth_logins</code></li> </ul> </li> <li>Post token<ul> <li>OK \u2192 event <code>login</code></li> <li>NG \u2192 no event</li> </ul> </li> </ol> </li> <li>Remember-me<ul> <li>Send remember-me cookie w/o session cookie<ul> <li>OK \u2192 no event</li> <li>NG \u2192 no event</li> </ul> </li> </ul> </li> <li>Magic-link<ol> <li>Post email<ul> <li>OK \u2192 no event</li> <li>NG \u2192 no event</li> </ul> </li> <li>Send request with token<ul> <li>OK \u2192 event <code>login</code> and <code>magicLogin</code> / table <code>auth_logins</code></li> <li>NG \u2192 event <code>failedLogin</code> / table <code>auth_logins</code></li> </ul> </li> </ol> </li> </ul>"},{"location":"references/authentication/tokens/","title":"Access Token Authenticator","text":"<p>The Access Token authenticator supports the use of revoke-able API tokens without using OAuth. These are commonly used to provide third-party developers access to your API. These tokens typically have a very long expiration time, often years.</p> <p>These are also suitable for use with mobile applications. In this case, the user would register/sign-in with their email/password. The application would create a new access token for them, with a recognizable name, like John's iPhone 12, and return it to the mobile application, where it is stored and used in all future requests.</p>"},{"location":"references/authentication/tokens/#access-tokenapi-authentication","title":"Access Token/API Authentication","text":"<p>Using access tokens requires that you either use/extend <code>CodeIgniter\\Shield\\Models\\UserModel</code> or use the <code>CodeIgniter\\Shield\\Authentication\\Traits\\HasAccessTokens</code> on your own user model. This trait provides all of the custom methods needed to implement access tokens in your application. The necessary database table, <code>auth_identities</code>, is created in Shield's only migration class, which must be run before first using any of the features of Shield.</p>"},{"location":"references/authentication/tokens/#generating-access-tokens","title":"Generating Access Tokens","text":"<p>Access tokens are created through the <code>generateAccessToken()</code> method on the user. This takes a name to give to the token as the first argument. The name is used to display it to the user so they can differentiate between multiple tokens.</p> <pre><code>$token = $user-&gt;generateAccessToken('Work Laptop');</code></pre> <p>This creates the token using a cryptographically secure random string. The token is hashed (sha256) before saving it to the database. The method returns an instance of <code>CodeIgniters\\Shield\\Authentication\\Entities\\AccessToken</code>. The only time a plain text version of the token is available is in the <code>AccessToken</code> returned immediately after creation.</p> <p>The plain text version should be displayed to the user immediately so they can copy it for their use. If a user loses it, they cannot see the raw version anymore, but they can generate a new token to use.</p> <pre><code>$token = $user-&gt;generateAccessToken('Work Laptop');\n\n// Only available immediately after creation.\necho $token-&gt;raw_token;</code></pre>"},{"location":"references/authentication/tokens/#revoking-access-tokens","title":"Revoking Access Tokens","text":"<p>Access tokens can be revoked through the <code>revokeAccessToken()</code> method. This takes the plain-text access token as the only argument. Revoking simply deletes the record from the database.</p> <pre><code>$user-&gt;revokeAccessToken($token);</code></pre> <p>Typically, the plain text token is retrieved from the request's headers as part of the authentication process. If you need to revoke the token for another user as an admin, and don't have access to the token, you would need to get the user's access tokens and delete them manually.</p> <p>If you don't have the raw token usable to remove the token there is the possibility to remove it using the tokens secret thats stored in the database. It's possible to get a list of all tokens with there secret using the <code>accessTokens()</code> function.</p> <pre><code>$user-&gt;revokeAccessTokenBySecret($secret);</code></pre> <p>You can revoke all access tokens with the <code>revokeAllAccessTokens()</code> method.</p> <pre><code>$user-&gt;revokeAllAccessTokens();</code></pre>"},{"location":"references/authentication/tokens/#retrieving-access-tokens","title":"Retrieving Access Tokens","text":"<p>The following methods are available to help you retrieve a user's access tokens:</p> <pre><code>// Retrieve a single token by plain text token\n$token = $user-&gt;getAccessToken($rawToken);\n\n// Retrieve a single token by it's database ID\n$token = $user-&gt;getAccessTokenById($id);\n\n// Retrieve all access tokens as an array of AccessToken instances.\n$tokens = $user-&gt;accessTokens();</code></pre>"},{"location":"references/authentication/tokens/#access-token-scopes","title":"Access Token Scopes","text":"<p>Each token can be given one or more scopes they can be used within. These can be thought of as permissions the token grants to the user. Scopes are provided when the token is generated and cannot be modified afterword.</p> <pre><code>$token = $user-&gt;generateAccessToken('Work Laptop', ['posts.manage', 'forums.manage']);</code></pre> <p>By default a user is granted a wildcard scope which provides access to all scopes. This is the same as:</p> <pre><code>$token = $user-&gt;generateAccessToken('Work Laptop', ['*']);</code></pre> <p>During authentication, the token the user used is stored on the user. Once authenticated, you can use the <code>tokenCan()</code> and <code>tokenCant()</code> methods on the user to determine if they have access to the specified scope.</p> <pre><code>if ($user-&gt;tokenCan('posts.manage')) {\n    // do something....\n}\n\nif ($user-&gt;tokenCant('forums.manage')) {\n    // do something....\n}</code></pre>"},{"location":"references/authentication/tokens/#configuration","title":"Configuration","text":"<p>Configure app/Config/AuthToken.php for your needs.</p> <p>Note</p> <p>Shield does not expect you use the Access Token Authenticator and HMAC Authenticator at the same time. Therefore, some Config items are common.</p>"},{"location":"references/authentication/tokens/#access-token-lifetime","title":"Access Token Lifetime","text":"<p>Tokens will expire after a specified amount of time has passed since they have been used.</p> <p>By default, this is set to 1 year. You can change this value by setting the <code>$unusedTokenLifetime</code> value. This is in seconds so that you can use the time constants that CodeIgniter provides.</p> <pre><code>public $unusedTokenLifetime = YEAR;</code></pre>"},{"location":"references/authentication/tokens/#login-attempt-logging","title":"Login Attempt Logging","text":"<p>By default, only failed login attempts are recorded in the <code>auth_token_logins</code> table.</p> <p>This can be modified by changing the <code>$recordLoginAttempt</code> value.</p> <pre><code>public int $recordLoginAttempt = Auth::RECORD_LOGIN_ATTEMPT_FAILURE;</code></pre> <p>If you don't want any logs, set it to <code>Auth::RECORD_LOGIN_ATTEMPT_NONE</code>.</p> <p>If you want to log all login attempts, set it to <code>Auth::RECORD_LOGIN_ATTEMPT_ALL</code>. It means you log all requests.</p>"},{"location":"references/authentication/tokens/#logging","title":"Logging","text":"<p>Login attempts are recorded in the <code>auth_token_logins</code> table, according to the configuration above.</p> <p>When a failed login attempt is logged, the raw token value sent is saved in the <code>identifier</code> column.</p> <p>When a successful login attempt is logged, the token name is saved in the <code>identifier</code> column.</p>"},{"location":"user_management/banning_users/","title":"Banning Users","text":"<p>Shield provides a way to ban users from your application. This is useful if you need to prevent a user from logging in, or logging them out in the event that they breach your terms of service.</p> <p>Note</p> <p>Before using the following methods, you need to get the <code>User</code> entity. See Getting the Current User or Finding a User for details.</p>"},{"location":"user_management/banning_users/#check-if-a-user-is-banned","title":"Check if a User is Banned","text":"<p>You can check if a user is banned using <code>isBanned()</code> method on the <code>User</code> entity. The method returns a boolean <code>true</code>/<code>false</code>.</p> <pre><code>if ($user-&gt;isBanned()) {\n    //...\n}</code></pre>"},{"location":"user_management/banning_users/#banning-a-user","title":"Banning a User","text":"<p>To ban a user from the application, the <code>ban(?string $message = null)</code> method can be called on the <code>User</code> entity. The method takes an optional string as a parameter. The string acts as the reason for the ban.</p> <pre><code>// banning a user without passing a message\n$user-&gt;ban();\n// banning a user with a message and reason for the ban passed.\n$user-&gt;ban('Your reason for banning the user here');</code></pre>"},{"location":"user_management/banning_users/#unbanning-a-user","title":"Unbanning a User","text":"<p>Unbanning a user can be done using the <code>unBan()</code> method on the <code>User</code> entity. This method will also reset the <code>status_message</code> property.</p> <pre><code>$user-&gt;unBan();</code></pre>"},{"location":"user_management/banning_users/#getting-the-reason-for-ban","title":"Getting the Reason for Ban","text":"<p>The reason for the ban can be obtained user the <code>getBanMessage()</code> method on the <code>User</code> entity.</p> <pre><code>$user-&gt;getBanMessage();</code></pre>"},{"location":"user_management/forcing_password_reset/","title":"Forcing Password Reset","text":"<p>Depending on the scope of your application, there may be times when you'll decide that it is absolutely necessary to force user(s) to reset their password. This practice is common when you find out that users of your application do not use strong passwords OR there is a reasonable suspicion that their passwords have been compromised.</p> <p>This guide provides you with ways to achieve this.</p> <p>Note</p> <p>Before using the following methods, you need to get the <code>User</code> entity. See Getting the Current User or Finding a User for details.</p>"},{"location":"user_management/forcing_password_reset/#available-methods","title":"Available Methods","text":"<p>Shield provides a way to enforce password resets throughout your application. The <code>Resettable</code> trait on the <code>User</code> entity and the <code>UserIdentityModel</code> provides the following methods to do so.</p> <p>Note</p> <p>If a user is put into the force reset state, Shield does nothing by default. You need to check if a user requires password reset (see below), and set the redirect URL for the reset page, and create the reset page.</p>"},{"location":"user_management/forcing_password_reset/#check-if-a-user-requires-password-reset","title":"Check if a User Requires Password Reset","text":"<p>When you need to check if a user requires password reset, you can do so using the <code>requiresPasswordReset()</code> method on the <code>User</code> entity. Returns boolean <code>true</code>/<code>false</code>.</p> <pre><code>if ($user-&gt;requiresPasswordReset()) {\n    //...\n}</code></pre> <p>Note</p> <p>You can use the force-reset filter to check.</p>"},{"location":"user_management/forcing_password_reset/#force-password-reset-on-a-user","title":"Force Password Reset On a User","text":"<p>To force password reset on a user, you can do so using the <code>forcePasswordReset()</code> method on the <code>User</code> entity.</p> <pre><code>$user-&gt;forcePasswordReset();</code></pre>"},{"location":"user_management/forcing_password_reset/#remove-force-password-reset-flag-on-a-user","title":"Remove Force Password Reset Flag On a User","text":"<p>Undoing or removing the force password reset flag on a user can be done using the <code>undoForcePasswordReset()</code> method on the <code>User</code> entity.</p> <pre><code>$user-&gt;undoForcePasswordReset();</code></pre>"},{"location":"user_management/forcing_password_reset/#force-password-reset-on-multiple-users","title":"Force Password Reset On Multiple Users","text":"<p>If you see the need to force password reset for more than one user, the <code>forceMultiplePasswordReset()</code> method of the <code>UserIdentityModel</code> allows you to do this easily. It accepts an <code>Array</code> of user IDs.</p> <pre><code>use CodeIgniter\\Shield\\Models\\UserIdentityModel;\n\n// ...\n$identities = new UserIdentityModel();\n$identities-&gt;forceMultiplePasswordReset([1,2,3,4]);</code></pre>"},{"location":"user_management/forcing_password_reset/#force-password-reset-on-all-users","title":"Force Password Reset On All Users","text":"<p>If you suspect a security breach or compromise in the passwords of your users, you can easily force password reset on all the users of your application using the <code>forceGlobalPasswordReset()</code> method of the <code>UserIdentityModel</code>.</p> <pre><code>use CodeIgniter\\Shield\\Models\\UserIdentityModel;\n\n// ...\n$identities = new UserIdentityModel();\n$identities-&gt;forceGlobalPasswordReset();</code></pre>"},{"location":"user_management/managing_users/","title":"Managing Users","text":"<p>Since Shield uses a more complex user setup than many other systems, separating User Identities from the user accounts themselves. This quick overview should help you feel more confident when working with users on a day-to-day basis.</p>"},{"location":"user_management/managing_users/#managing-users-by-code","title":"Managing Users by Code","text":""},{"location":"user_management/managing_users/#finding-a-user","title":"Finding a User","text":"<p>You can find an existing user from the User Provider. It returns a <code>User</code> entity.</p> <pre><code>// Get the User Provider (UserModel by default)\n$users = auth()-&gt;getProvider();\n\n// Find by the user_id\n$user = $users-&gt;findById(123);\n// Find by the user email\n$user = $users-&gt;findByCredentials(['email' =&gt; 'user@example.com']);</code></pre>"},{"location":"user_management/managing_users/#creating-users","title":"Creating Users","text":"<p>By default, the only values stored in the users table is the username.</p> <p>The first step is to create the user record with the username. If you don't have a username, be sure to set the value to <code>null</code> anyway, so that it passes CodeIgniter's empty data check.</p> <pre><code>use CodeIgniter\\Shield\\Entities\\User;\n\n// Get the User Provider (UserModel by default)\n$users = auth()-&gt;getProvider();\n\n$user = new User([\n    'username' =&gt; 'foo-bar',\n    'email'    =&gt; 'foo.bar@example.com',\n    'password' =&gt; 'secret plain text password',\n]);\n$users-&gt;save($user);\n\n// To get the complete user object with ID, we need to get from the database\n$user = $users-&gt;findById($users-&gt;getInsertID());\n\n// Add to default group\n$users-&gt;addToDefaultGroup($user);</code></pre>"},{"location":"user_management/managing_users/#deleting-users","title":"Deleting Users","text":"<p>A user's data can be spread over a few different tables so you might be concerned about how to delete all of the user's data from the system. This is handled automatically at the database level for all information that Shield knows about, through the <code>onCascade</code> settings of the table's foreign keys.</p> <p>You can delete a user like any other entity.</p> <pre><code>// Get the User Provider (UserModel by default)\n$users = auth()-&gt;getProvider();\n\n$users-&gt;delete($user-&gt;id, true);</code></pre> <p>Note</p> <p>The User rows use soft deletes so they are not actually deleted from the database unless the second parameter is <code>true</code>, like above.</p>"},{"location":"user_management/managing_users/#editing-a-user","title":"Editing a User","text":"<p>The <code>UserModel::save()</code>, <code>update()</code> and <code>insert()</code> methods have been modified to ensure that an email or password previously set on the <code>User</code> entity will be automatically updated in the correct <code>UserIdentity</code> record.</p> <pre><code>// Get the User Provider (UserModel by default)\n$users = auth()-&gt;getProvider();\n\n$user = $users-&gt;findById(123);\n$user-&gt;fill([\n    'username' =&gt; 'JoeSmith111',\n    'email' =&gt; 'joe.smith@example.com',\n    'password' =&gt; 'secret123'\n]);\n$users-&gt;save($user);</code></pre>"},{"location":"user_management/managing_users/#managing-users-via-cli","title":"Managing Users via CLI","text":"<p>Shield has a CLI command to manage users. You can do the following actions:</p> <pre><code>create:      Create a new user\nactivate:    Activate a user\ndeactivate:  Deactivate a user\nchangename:  Change user name\nchangeemail: Change user email\ndelete:      Delete a user\npassword:    Change a user password\nlist:        List users\naddgroup:    Add a user to a group\nremovegroup: Remove a user from a group</code></pre> <p>You can get help on how to use it by running the following command in a terminal:</p> <pre><code>php spark shield:user --help</code></pre>"}]}